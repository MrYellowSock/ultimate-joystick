
special_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003320  08003320  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003328  08003328  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800333c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800333c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009785  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ef  00000000  00000000  00029802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058d  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026348  00000000  00000000  0002bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095f4  00000000  00000000  00051f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eea9e  00000000  00000000  0005b501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ce8  00000000  00000000  00149fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003284 	.word	0x08003284

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003284 	.word	0x08003284

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b970 	b.w	8000554 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9e08      	ldr	r6, [sp, #32]
 8000292:	460d      	mov	r5, r1
 8000294:	4604      	mov	r4, r0
 8000296:	460f      	mov	r7, r1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d14a      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029c:	428a      	cmp	r2, r1
 800029e:	4694      	mov	ip, r2
 80002a0:	d965      	bls.n	800036e <__udivmoddi4+0xe2>
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	b143      	cbz	r3, 80002ba <__udivmoddi4+0x2e>
 80002a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ac:	f1c3 0220 	rsb	r2, r3, #32
 80002b0:	409f      	lsls	r7, r3
 80002b2:	fa20 f202 	lsr.w	r2, r0, r2
 80002b6:	4317      	orrs	r7, r2
 80002b8:	409c      	lsls	r4, r3
 80002ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002be:	fa1f f58c 	uxth.w	r5, ip
 80002c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002c6:	0c22      	lsrs	r2, r4, #16
 80002c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d0:	fb01 f005 	mul.w	r0, r1, r5
 80002d4:	4290      	cmp	r0, r2
 80002d6:	d90a      	bls.n	80002ee <__udivmoddi4+0x62>
 80002d8:	eb1c 0202 	adds.w	r2, ip, r2
 80002dc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002e0:	f080 811c 	bcs.w	800051c <__udivmoddi4+0x290>
 80002e4:	4290      	cmp	r0, r2
 80002e6:	f240 8119 	bls.w	800051c <__udivmoddi4+0x290>
 80002ea:	3902      	subs	r1, #2
 80002ec:	4462      	add	r2, ip
 80002ee:	1a12      	subs	r2, r2, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	42a5      	cmp	r5, r4
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x90>
 8000306:	eb1c 0404 	adds.w	r4, ip, r4
 800030a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800030e:	f080 8107 	bcs.w	8000520 <__udivmoddi4+0x294>
 8000312:	42a5      	cmp	r5, r4
 8000314:	f240 8104 	bls.w	8000520 <__udivmoddi4+0x294>
 8000318:	4464      	add	r4, ip
 800031a:	3802      	subs	r0, #2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0xa2>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xbc>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80ed 	beq.w	8000516 <__udivmoddi4+0x28a>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d149      	bne.n	80003e4 <__udivmoddi4+0x158>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d302      	bcc.n	800035a <__udivmoddi4+0xce>
 8000354:	4282      	cmp	r2, r0
 8000356:	f200 80f8 	bhi.w	800054a <__udivmoddi4+0x2be>
 800035a:	1a84      	subs	r4, r0, r2
 800035c:	eb65 0203 	sbc.w	r2, r5, r3
 8000360:	2001      	movs	r0, #1
 8000362:	4617      	mov	r7, r2
 8000364:	2e00      	cmp	r6, #0
 8000366:	d0e2      	beq.n	800032e <__udivmoddi4+0xa2>
 8000368:	e9c6 4700 	strd	r4, r7, [r6]
 800036c:	e7df      	b.n	800032e <__udivmoddi4+0xa2>
 800036e:	b902      	cbnz	r2, 8000372 <__udivmoddi4+0xe6>
 8000370:	deff      	udf	#255	; 0xff
 8000372:	fab2 f382 	clz	r3, r2
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 8090 	bne.w	800049c <__udivmoddi4+0x210>
 800037c:	1a8a      	subs	r2, r1, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	2101      	movs	r1, #1
 8000388:	fbb2 f5f7 	udiv	r5, r2, r7
 800038c:	fb07 2015 	mls	r0, r7, r5, r2
 8000390:	0c22      	lsrs	r2, r4, #16
 8000392:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000396:	fb0e f005 	mul.w	r0, lr, r5
 800039a:	4290      	cmp	r0, r2
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x124>
 800039e:	eb1c 0202 	adds.w	r2, ip, r2
 80003a2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x122>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f200 80cb 	bhi.w	8000544 <__udivmoddi4+0x2b8>
 80003ae:	4645      	mov	r5, r8
 80003b0:	1a12      	subs	r2, r2, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b8:	fb07 2210 	mls	r2, r7, r0, r2
 80003bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c0:	fb0e fe00 	mul.w	lr, lr, r0
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x14e>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003d0:	d202      	bcs.n	80003d8 <__udivmoddi4+0x14c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f200 80bb 	bhi.w	800054e <__udivmoddi4+0x2c2>
 80003d8:	4610      	mov	r0, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e2:	e79f      	b.n	8000324 <__udivmoddi4+0x98>
 80003e4:	f1c1 0720 	rsb	r7, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80003f2:	fa05 f401 	lsl.w	r4, r5, r1
 80003f6:	fa20 f307 	lsr.w	r3, r0, r7
 80003fa:	40fd      	lsrs	r5, r7
 80003fc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000400:	4323      	orrs	r3, r4
 8000402:	fbb5 f8f9 	udiv	r8, r5, r9
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	fb09 5518 	mls	r5, r9, r8, r5
 800040e:	0c1c      	lsrs	r4, r3, #16
 8000410:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000414:	fb08 f50e 	mul.w	r5, r8, lr
 8000418:	42a5      	cmp	r5, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	fa00 f001 	lsl.w	r0, r0, r1
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b0>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800042c:	f080 8088 	bcs.w	8000540 <__udivmoddi4+0x2b4>
 8000430:	42a5      	cmp	r5, r4
 8000432:	f240 8085 	bls.w	8000540 <__udivmoddi4+0x2b4>
 8000436:	f1a8 0802 	sub.w	r8, r8, #2
 800043a:	4464      	add	r4, ip
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	b29d      	uxth	r5, r3
 8000440:	fbb4 f3f9 	udiv	r3, r4, r9
 8000444:	fb09 4413 	mls	r4, r9, r3, r4
 8000448:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800044c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1da>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800045c:	d26c      	bcs.n	8000538 <__udivmoddi4+0x2ac>
 800045e:	45a6      	cmp	lr, r4
 8000460:	d96a      	bls.n	8000538 <__udivmoddi4+0x2ac>
 8000462:	3b02      	subs	r3, #2
 8000464:	4464      	add	r4, ip
 8000466:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800046a:	fba3 9502 	umull	r9, r5, r3, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	42ac      	cmp	r4, r5
 8000474:	46c8      	mov	r8, r9
 8000476:	46ae      	mov	lr, r5
 8000478:	d356      	bcc.n	8000528 <__udivmoddi4+0x29c>
 800047a:	d053      	beq.n	8000524 <__udivmoddi4+0x298>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x208>
 800047e:	ebb0 0208 	subs.w	r2, r0, r8
 8000482:	eb64 040e 	sbc.w	r4, r4, lr
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40ca      	lsrs	r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	4317      	orrs	r7, r2
 8000490:	e9c6 7400 	strd	r7, r4, [r6]
 8000494:	4618      	mov	r0, r3
 8000496:	2100      	movs	r1, #0
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	f1c3 0120 	rsb	r1, r3, #32
 80004a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a4:	fa20 f201 	lsr.w	r2, r0, r1
 80004a8:	fa25 f101 	lsr.w	r1, r5, r1
 80004ac:	409d      	lsls	r5, r3
 80004ae:	432a      	orrs	r2, r5
 80004b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1510 	mls	r5, r7, r0, r1
 80004c0:	0c11      	lsrs	r1, r2, #16
 80004c2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004c6:	fb00 f50e 	mul.w	r5, r0, lr
 80004ca:	428d      	cmp	r5, r1
 80004cc:	fa04 f403 	lsl.w	r4, r4, r3
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x258>
 80004d2:	eb1c 0101 	adds.w	r1, ip, r1
 80004d6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004da:	d22f      	bcs.n	800053c <__udivmoddi4+0x2b0>
 80004dc:	428d      	cmp	r5, r1
 80004de:	d92d      	bls.n	800053c <__udivmoddi4+0x2b0>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1b49      	subs	r1, r1, r5
 80004e6:	b292      	uxth	r2, r2
 80004e8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ec:	fb07 1115 	mls	r1, r7, r5, r1
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	fb05 f10e 	mul.w	r1, r5, lr
 80004f8:	4291      	cmp	r1, r2
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x282>
 80004fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000500:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000504:	d216      	bcs.n	8000534 <__udivmoddi4+0x2a8>
 8000506:	4291      	cmp	r1, r2
 8000508:	d914      	bls.n	8000534 <__udivmoddi4+0x2a8>
 800050a:	3d02      	subs	r5, #2
 800050c:	4462      	add	r2, ip
 800050e:	1a52      	subs	r2, r2, r1
 8000510:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000514:	e738      	b.n	8000388 <__udivmoddi4+0xfc>
 8000516:	4631      	mov	r1, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e708      	b.n	800032e <__udivmoddi4+0xa2>
 800051c:	4639      	mov	r1, r7
 800051e:	e6e6      	b.n	80002ee <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e6fb      	b.n	800031c <__udivmoddi4+0x90>
 8000524:	4548      	cmp	r0, r9
 8000526:	d2a9      	bcs.n	800047c <__udivmoddi4+0x1f0>
 8000528:	ebb9 0802 	subs.w	r8, r9, r2
 800052c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000530:	3b01      	subs	r3, #1
 8000532:	e7a3      	b.n	800047c <__udivmoddi4+0x1f0>
 8000534:	4645      	mov	r5, r8
 8000536:	e7ea      	b.n	800050e <__udivmoddi4+0x282>
 8000538:	462b      	mov	r3, r5
 800053a:	e794      	b.n	8000466 <__udivmoddi4+0x1da>
 800053c:	4640      	mov	r0, r8
 800053e:	e7d1      	b.n	80004e4 <__udivmoddi4+0x258>
 8000540:	46d0      	mov	r8, sl
 8000542:	e77b      	b.n	800043c <__udivmoddi4+0x1b0>
 8000544:	3d02      	subs	r5, #2
 8000546:	4462      	add	r2, ip
 8000548:	e732      	b.n	80003b0 <__udivmoddi4+0x124>
 800054a:	4608      	mov	r0, r1
 800054c:	e70a      	b.n	8000364 <__udivmoddi4+0xd8>
 800054e:	4464      	add	r4, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e742      	b.n	80003da <__udivmoddi4+0x14e>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <cleverSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char sendBuff[100] = {0};
void cleverSend(UART_HandleTypeDef huart,char * tosend){
 8000558:	b084      	sub	sp, #16
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
 800055e:	f107 0c08 	add.w	ip, r7, #8
 8000562:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  while(__HAL_UART_GET_FLAG(&huart,UART_FLAG_TC)==RESET){}
 8000566:	bf00      	nop
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000570:	2b40      	cmp	r3, #64	; 0x40
 8000572:	d1f9      	bne.n	8000568 <cleverSend+0x10>
	  sendBuff[0] = 0;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <cleverSend+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	  strcat(sendBuff,tosend);
 800057a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800057e:	480a      	ldr	r0, [pc, #40]	; (80005a8 <cleverSend+0x50>)
 8000580:	f002 fe3f 	bl	8003202 <strcat>
//	  strcat(sendBuff,"\n");
	  HAL_UART_Transmit(&huart, (uint8_t*) sendBuff, strlen(sendBuff),HAL_MAX_DELAY);
 8000584:	4808      	ldr	r0, [pc, #32]	; (80005a8 <cleverSend+0x50>)
 8000586:	f7ff fe61 	bl	800024c <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000592:	4905      	ldr	r1, [pc, #20]	; (80005a8 <cleverSend+0x50>)
 8000594:	f107 0008 	add.w	r0, r7, #8
 8000598:	f002 f8ca 	bl	8002730 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005a4:	b004      	add	sp, #16
 80005a6:	4770      	bx	lr
 80005a8:	20000138 	.word	0x20000138

080005ac <cleverReceive>:
 void cleverReceive(UART_HandleTypeDef huart, char * buffer,int size){
 80005ac:	b084      	sub	sp, #16
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	f107 0c10 	add.w	ip, r7, #16
 80005b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  int i = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
	  while(__HAL_UART_GET_FLAG(&huart,UART_FLAG_RXNE)== RESET){}
 80005c0:	bf00      	nop
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f003 0320 	and.w	r3, r3, #32
 80005ca:	2b20      	cmp	r3, #32
 80005cc:	d1f9      	bne.n	80005c2 <cleverReceive+0x16>
	  while(i < size){
 80005ce:	e029      	b.n	8000624 <cleverReceive+0x78>
		  HAL_UART_Receive(&huart, (uint8_t*) &buffer[i], 1, HAL_MAX_DELAY);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80005d6:	18d1      	adds	r1, r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	2201      	movs	r2, #1
 80005de:	f107 0010 	add.w	r0, r7, #16
 80005e2:	f002 f928 	bl	8002836 <HAL_UART_Receive>
		  if(buffer[i] == 0 || buffer[i] == '\n' || buffer[i] == '\r'){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00d      	beq.n	8000610 <cleverReceive+0x64>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d006      	beq.n	8000610 <cleverReceive+0x64>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b0d      	cmp	r3, #13
 800060e:	d106      	bne.n	800061e <cleverReceive+0x72>
			  buffer[i] = 0;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000616:	4413      	add	r3, r2
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			  break;
 800061c:	e008      	b.n	8000630 <cleverReceive+0x84>
		  }
		  i++;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3301      	adds	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
	  while(i < size){
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800062a:	429a      	cmp	r2, r3
 800062c:	dbd0      	blt.n	80005d0 <cleverReceive+0x24>
	  }
 }
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063a:	b004      	add	sp, #16
 800063c:	4770      	bx	lr
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8000646:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fc29 	bl	8000e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f9d8 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 faa4 	bl	8000b9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000654:	f000 fa42 	bl	8000adc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000658:	f000 fa70 	bl	8000b3c <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char nameMine[100] = {0};
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000662:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8000666:	2260      	movs	r2, #96	; 0x60
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fdc1 	bl	80031f2 <memset>
  char nameYour[100] = {0};
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000676:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800067a:	2260      	movs	r2, #96	; 0x60
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fdb7 	bl	80031f2 <memset>
  char initial[] = "Man from Boogey forest!\nQUIT PRESS q\nName: ";
 8000684:	4bd4      	ldr	r3, [pc, #848]	; (80009d8 <main+0x398>)
 8000686:	f507 7430 	add.w	r4, r7, #704	; 0x2c0
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  char receive[100] = {0};
 800069c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80006a0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2260      	movs	r2, #96	; 0x60
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fd9f 	bl	80031f2 <memset>
  cleverSend(huart3, initial);
 80006b4:	4cc9      	ldr	r4, [pc, #804]	; (80009dc <main+0x39c>)
 80006b6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80006ba:	931e      	str	r3, [sp, #120]	; 0x78
 80006bc:	4668      	mov	r0, sp
 80006be:	f104 0310 	add.w	r3, r4, #16
 80006c2:	2278      	movs	r2, #120	; 0x78
 80006c4:	4619      	mov	r1, r3
 80006c6:	f002 fdcf 	bl	8003268 <memcpy>
 80006ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006ce:	f7ff ff43 	bl	8000558 <cleverSend>
  cleverReceive(huart3, nameMine, 100);
 80006d2:	4cc2      	ldr	r4, [pc, #776]	; (80009dc <main+0x39c>)
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80006d8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80006dc:	931e      	str	r3, [sp, #120]	; 0x78
 80006de:	4668      	mov	r0, sp
 80006e0:	f104 0310 	add.w	r3, r4, #16
 80006e4:	2278      	movs	r2, #120	; 0x78
 80006e6:	4619      	mov	r1, r3
 80006e8:	f002 fdbe 	bl	8003268 <memcpy>
 80006ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006f0:	f7ff ff5c 	bl	80005ac <cleverReceive>
  cleverSend(huart3, nameMine);
 80006f4:	4cb9      	ldr	r4, [pc, #740]	; (80009dc <main+0x39c>)
 80006f6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80006fa:	931e      	str	r3, [sp, #120]	; 0x78
 80006fc:	4668      	mov	r0, sp
 80006fe:	f104 0310 	add.w	r3, r4, #16
 8000702:	2278      	movs	r2, #120	; 0x78
 8000704:	4619      	mov	r1, r3
 8000706:	f002 fdaf 	bl	8003268 <memcpy>
 800070a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800070e:	f7ff ff23 	bl	8000558 <cleverSend>
  cleverSend(huart3, "\n");
 8000712:	4cb2      	ldr	r4, [pc, #712]	; (80009dc <main+0x39c>)
 8000714:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x3a0>)
 8000716:	931e      	str	r3, [sp, #120]	; 0x78
 8000718:	4668      	mov	r0, sp
 800071a:	f104 0310 	add.w	r3, r4, #16
 800071e:	2278      	movs	r2, #120	; 0x78
 8000720:	4619      	mov	r1, r3
 8000722:	f002 fda1 	bl	8003268 <memcpy>
 8000726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800072a:	f7ff ff15 	bl	8000558 <cleverSend>

  // start com
  char nameForYou[100] = {0};
 800072e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000732:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	3304      	adds	r3, #4
 800073c:	2260      	movs	r2, #96	; 0x60
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fd56 	bl	80031f2 <memset>
  strcat(nameForYou,nameMine);
 8000746:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800074a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fd56 	bl	8003202 <strcat>
  strcat(nameForYou,"\n");
 8000756:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd76 	bl	800024c <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000768:	4413      	add	r3, r2
 800076a:	499d      	ldr	r1, [pc, #628]	; (80009e0 <main+0x3a0>)
 800076c:	461a      	mov	r2, r3
 800076e:	460b      	mov	r3, r1
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	8013      	strh	r3, [r2, #0]
  cleverSend(huart6, nameForYou);
 8000774:	4c9b      	ldr	r4, [pc, #620]	; (80009e4 <main+0x3a4>)
 8000776:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800077a:	931e      	str	r3, [sp, #120]	; 0x78
 800077c:	4668      	mov	r0, sp
 800077e:	f104 0310 	add.w	r3, r4, #16
 8000782:	2278      	movs	r2, #120	; 0x78
 8000784:	4619      	mov	r1, r3
 8000786:	f002 fd6f 	bl	8003268 <memcpy>
 800078a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800078e:	f7ff fee3 	bl	8000558 <cleverSend>
  cleverSend(huart3, "I am waiting...\n");
 8000792:	4c92      	ldr	r4, [pc, #584]	; (80009dc <main+0x39c>)
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <main+0x3a8>)
 8000796:	931e      	str	r3, [sp, #120]	; 0x78
 8000798:	4668      	mov	r0, sp
 800079a:	f104 0310 	add.w	r3, r4, #16
 800079e:	2278      	movs	r2, #120	; 0x78
 80007a0:	4619      	mov	r1, r3
 80007a2:	f002 fd61 	bl	8003268 <memcpy>
 80007a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007aa:	f7ff fed5 	bl	8000558 <cleverSend>
  cleverReceive(huart6, nameYour, 100);
 80007ae:	4c8d      	ldr	r4, [pc, #564]	; (80009e4 <main+0x3a4>)
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80007b4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80007b8:	931e      	str	r3, [sp, #120]	; 0x78
 80007ba:	4668      	mov	r0, sp
 80007bc:	f104 0310 	add.w	r3, r4, #16
 80007c0:	2278      	movs	r2, #120	; 0x78
 80007c2:	4619      	mov	r1, r3
 80007c4:	f002 fd50 	bl	8003268 <memcpy>
 80007c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007cc:	f7ff feee 	bl	80005ac <cleverReceive>
  cleverSend(huart3, nameYour);
 80007d0:	4c82      	ldr	r4, [pc, #520]	; (80009dc <main+0x39c>)
 80007d2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80007d6:	931e      	str	r3, [sp, #120]	; 0x78
 80007d8:	4668      	mov	r0, sp
 80007da:	f104 0310 	add.w	r3, r4, #16
 80007de:	2278      	movs	r2, #120	; 0x78
 80007e0:	4619      	mov	r1, r3
 80007e2:	f002 fd41 	bl	8003268 <memcpy>
 80007e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007ea:	f7ff feb5 	bl	8000558 <cleverSend>
  cleverSend(huart3, " is ready\n");
 80007ee:	4c7b      	ldr	r4, [pc, #492]	; (80009dc <main+0x39c>)
 80007f0:	4b7e      	ldr	r3, [pc, #504]	; (80009ec <main+0x3ac>)
 80007f2:	931e      	str	r3, [sp, #120]	; 0x78
 80007f4:	4668      	mov	r0, sp
 80007f6:	f104 0310 	add.w	r3, r4, #16
 80007fa:	2278      	movs	r2, #120	; 0x78
 80007fc:	4619      	mov	r1, r3
 80007fe:	f002 fd33 	bl	8003268 <memcpy>
 8000802:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000806:	f7ff fea7 	bl	8000558 <cleverSend>

  int isSender = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char tosend[500] = {0};
 8000810:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000814:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	3304      	adds	r3, #4
 800081e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fce4 	bl	80031f2 <memset>
	  if(isSender){
 800082a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800082e:	2b00      	cmp	r3, #0
 8000830:	d05f      	beq.n	80008f2 <main+0x2b2>
		  strcat(tosend,nameMine);
 8000832:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fce1 	bl	8003202 <strcat>
		  strcat(tosend," => ");
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fd02 	bl	800024c <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4413      	add	r3, r2
 8000850:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <main+0x3b0>)
 8000852:	6810      	ldr	r0, [r2, #0]
 8000854:	6018      	str	r0, [r3, #0]
 8000856:	7912      	ldrb	r2, [r2, #4]
 8000858:	711a      	strb	r2, [r3, #4]
		  cleverSend(huart3, tosend);
 800085a:	4c60      	ldr	r4, [pc, #384]	; (80009dc <main+0x39c>)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	931e      	str	r3, [sp, #120]	; 0x78
 8000860:	4668      	mov	r0, sp
 8000862:	f104 0310 	add.w	r3, r4, #16
 8000866:	2278      	movs	r2, #120	; 0x78
 8000868:	4619      	mov	r1, r3
 800086a:	f002 fcfd 	bl	8003268 <memcpy>
 800086e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000872:	f7ff fe71 	bl	8000558 <cleverSend>
		  cleverReceive(huart3, receive, 99);
 8000876:	4c59      	ldr	r4, [pc, #356]	; (80009dc <main+0x39c>)
 8000878:	2363      	movs	r3, #99	; 0x63
 800087a:	931f      	str	r3, [sp, #124]	; 0x7c
 800087c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000880:	931e      	str	r3, [sp, #120]	; 0x78
 8000882:	4668      	mov	r0, sp
 8000884:	f104 0310 	add.w	r3, r4, #16
 8000888:	2278      	movs	r2, #120	; 0x78
 800088a:	4619      	mov	r1, r3
 800088c:	f002 fcec 	bl	8003268 <memcpy>
 8000890:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000894:	f7ff fe8a 	bl	80005ac <cleverReceive>
		  cleverSend(huart3,receive);
 8000898:	4c50      	ldr	r4, [pc, #320]	; (80009dc <main+0x39c>)
 800089a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800089e:	931e      	str	r3, [sp, #120]	; 0x78
 80008a0:	4668      	mov	r0, sp
 80008a2:	f104 0310 	add.w	r3, r4, #16
 80008a6:	2278      	movs	r2, #120	; 0x78
 80008a8:	4619      	mov	r1, r3
 80008aa:	f002 fcdd 	bl	8003268 <memcpy>
 80008ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008b2:	f7ff fe51 	bl	8000558 <cleverSend>
		  cleverSend(huart3,"\n");
 80008b6:	4c49      	ldr	r4, [pc, #292]	; (80009dc <main+0x39c>)
 80008b8:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <main+0x3a0>)
 80008ba:	931e      	str	r3, [sp, #120]	; 0x78
 80008bc:	4668      	mov	r0, sp
 80008be:	f104 0310 	add.w	r3, r4, #16
 80008c2:	2278      	movs	r2, #120	; 0x78
 80008c4:	4619      	mov	r1, r3
 80008c6:	f002 fccf 	bl	8003268 <memcpy>
 80008ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ce:	f7ff fe43 	bl	8000558 <cleverSend>
		  cleverSend(huart6,receive);
 80008d2:	4c44      	ldr	r4, [pc, #272]	; (80009e4 <main+0x3a4>)
 80008d4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80008d8:	931e      	str	r3, [sp, #120]	; 0x78
 80008da:	4668      	mov	r0, sp
 80008dc:	f104 0310 	add.w	r3, r4, #16
 80008e0:	2278      	movs	r2, #120	; 0x78
 80008e2:	4619      	mov	r1, r3
 80008e4:	f002 fcc0 	bl	8003268 <memcpy>
 80008e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ec:	f7ff fe34 	bl	8000558 <cleverSend>
 80008f0:	e044      	b.n	800097c <main+0x33c>
	  }
	  else{
//		  cleverSend(huart3, "waiting for another");
		  cleverReceive(huart6, receive, 99);
 80008f2:	4c3c      	ldr	r4, [pc, #240]	; (80009e4 <main+0x3a4>)
 80008f4:	2363      	movs	r3, #99	; 0x63
 80008f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80008f8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80008fc:	931e      	str	r3, [sp, #120]	; 0x78
 80008fe:	4668      	mov	r0, sp
 8000900:	f104 0310 	add.w	r3, r4, #16
 8000904:	2278      	movs	r2, #120	; 0x78
 8000906:	4619      	mov	r1, r3
 8000908:	f002 fcae 	bl	8003268 <memcpy>
 800090c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000910:	f7ff fe4c 	bl	80005ac <cleverReceive>

		  strcat(tosend,nameYour);
 8000914:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fc70 	bl	8003202 <strcat>
		  strcat(tosend," : ");
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc91 	bl	800024c <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4413      	add	r3, r2
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <main+0x3b4>)
 8000934:	6810      	ldr	r0, [r2, #0]
 8000936:	6018      	str	r0, [r3, #0]
		  strcat(tosend,receive);
 8000938:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fc5e 	bl	8003202 <strcat>
		  strcat(tosend,"\n");
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc7f 	bl	800024c <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4413      	add	r3, r2
 8000956:	4922      	ldr	r1, [pc, #136]	; (80009e0 <main+0x3a0>)
 8000958:	461a      	mov	r2, r3
 800095a:	460b      	mov	r3, r1
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	8013      	strh	r3, [r2, #0]
		  cleverSend(huart3,tosend);
 8000960:	4c1e      	ldr	r4, [pc, #120]	; (80009dc <main+0x39c>)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	931e      	str	r3, [sp, #120]	; 0x78
 8000966:	4668      	mov	r0, sp
 8000968:	f104 0310 	add.w	r3, r4, #16
 800096c:	2278      	movs	r2, #120	; 0x78
 800096e:	4619      	mov	r1, r3
 8000970:	f002 fc7a 	bl	8003268 <memcpy>
 8000974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000978:	f7ff fdee 	bl	8000558 <cleverSend>
	  }
	  if(strcmp(receive,"q") == 0){
 800097c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000980:	491d      	ldr	r1, [pc, #116]	; (80009f8 <main+0x3b8>)
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc58 	bl	8000238 <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10e      	bne.n	80009ac <main+0x36c>
		  cleverSend(huart3,"The end\n");
 800098e:	4c13      	ldr	r4, [pc, #76]	; (80009dc <main+0x39c>)
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <main+0x3bc>)
 8000992:	931e      	str	r3, [sp, #120]	; 0x78
 8000994:	4668      	mov	r0, sp
 8000996:	f104 0310 	add.w	r3, r4, #16
 800099a:	2278      	movs	r2, #120	; 0x78
 800099c:	4619      	mov	r1, r3
 800099e:	f002 fc63 	bl	8003268 <memcpy>
 80009a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a6:	f7ff fdd7 	bl	8000558 <cleverSend>
		  break;
 80009aa:	e00f      	b.n	80009cc <main+0x38c>
	  }
	  receive[0] = 0;
 80009ac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80009b0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	  isSender = !isSender;
 80009b8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
  {
 80009ca:	e721      	b.n	8000810 <main+0x1d0>
 80009cc:	2300      	movs	r3, #0
//	  while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_TC)==RESET){}
//	  HAL_UART_Transmit(&huart6, (uint8_t*) tosend, strlen(tosend),1000);
//	  HAL_Delay(1000);
//  }
  /* USER CODE END 3 */
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	f507 776e 	add.w	r7, r7, #952	; 0x3b8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bdb0      	pop	{r4, r5, r7, pc}
 80009d8:	080032dc 	.word	0x080032dc
 80009dc:	20000028 	.word	0x20000028
 80009e0:	0800329c 	.word	0x0800329c
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	080032a0 	.word	0x080032a0
 80009ec:	080032b4 	.word	0x080032b4
 80009f0:	080032c0 	.word	0x080032c0
 80009f4:	080032c8 	.word	0x080032c8
 80009f8:	080032cc 	.word	0x080032cc
 80009fc:	080032d0 	.word	0x080032d0

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fbef 	bl	80031f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a6c:	23d8      	movs	r3, #216	; 0xd8
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fd4b 	bl	800151c <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a8c:	f000 f8d2 	bl	8000c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a90:	f000 fcf4 	bl	800147c <HAL_PWREx_EnableOverDrive>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9a:	f000 f8cb 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2107      	movs	r1, #7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 ffdb 	bl	8001a78 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ac8:	f000 f8b4 	bl	8000c34 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_USART3_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b20:	f001 fdb8 	bl	8002694 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f883 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000028 	.word	0x20000028
 8000b38:	40004800 	.word	0x40004800

08000b3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART6_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART6_UART_Init+0x58>)
 8000b80:	f001 fd88 	bl	8002694 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 f853 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000b0 	.word	0x200000b0
 8000b98:	40011400 	.word	0x40011400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_GPIO_Init+0x90>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be2:	2320      	movs	r3, #32
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x94>)
 8000bfe:	f000 fa91 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c02:	2340      	movs	r3, #64	; 0x40
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_GPIO_Init+0x94>)
 8000c1e:	f000 fa81 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0b0      	sub	sp, #192	; 0xc0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2290      	movs	r2, #144	; 0x90
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 faa2 	bl	80031f2 <memset>
  if(huart->Instance==USART3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a43      	ldr	r2, [pc, #268]	; (8000dc0 <HAL_UART_MspInit+0x138>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d13d      	bne.n	8000d34 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 f8bc 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd2:	f7ff ffaf 	bl	8000c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a3a      	ldr	r2, [pc, #232]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d20:	2307      	movs	r3, #7
 8000d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <HAL_UART_MspInit+0x140>)
 8000d2e:	f000 f9f9 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d32:	e041      	b.n	8000db8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART6)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <HAL_UART_MspInit+0x144>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d13c      	bne.n	8000db8 <HAL_UART_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d42:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d44:	2300      	movs	r3, #0
 8000d46:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f879 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d58:	f7ff ff6c 	bl	8000c34 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6453      	str	r3, [r2, #68]	; 0x44
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x13c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000d8c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000da6:	2308      	movs	r3, #8
 8000da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <HAL_UART_MspInit+0x148>)
 8000db4:	f000 f9b6 	bl	8001124 <HAL_GPIO_Init>
}
 8000db8:	bf00      	nop
 8000dba:	37c0      	adds	r7, #192	; 0xc0
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40011400 	.word	0x40011400
 8000dd0:	40021800 	.word	0x40021800

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f87a 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e68:	4c0b      	ldr	r4, [pc, #44]	; (8000e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ffd7 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 f9d1 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fbdf 	bl	8000640 <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e90:	08003330 	.word	0x08003330
  ldr r2, =_sbss
 8000e94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e98:	200001a0 	.word	0x200001a0

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>

08000e9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f90a 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea8:	200f      	movs	r0, #15
 8000eaa:	f000 f805 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eae:	f7ff fec7 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f917 	bl	800110a <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f8ed 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	2000019c 	.word	0x2000019c

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000019c 	.word	0x2000019c

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	05fa0000 	.word	0x05fa0000

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff47 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e175      	b.n	8001430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8164 	bne.w	800142a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_GPIO_Init+0x56>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d017      	beq.n	8001218 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d123      	bne.n	800126c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0203 	and.w	r2, r3, #3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80be 	beq.w	800142a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_Init+0x328>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d037      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d031      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d02b      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x21a>
 800133a:	2309      	movs	r3, #9
 800133c:	e012      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800133e:	230a      	movs	r3, #10
 8001340:	e010      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001342:	2308      	movs	r3, #8
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001346:	2307      	movs	r3, #7
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x328>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae86 	bls.w	8001144 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40022000 	.word	0x40022000
 8001474:	40022400 	.word	0x40022400
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_PWREx_EnableOverDrive+0x98>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a22      	ldr	r2, [pc, #136]	; (8001514 <HAL_PWREx_EnableOverDrive+0x98>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_PWREx_EnableOverDrive+0x98>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014aa:	f7ff fd49 	bl	8000f40 <HAL_GetTick>
 80014ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014b0:	e009      	b.n	80014c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b2:	f7ff fd45 	bl	8000f40 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c0:	d901      	bls.n	80014c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e022      	b.n	800150c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d1ee      	bne.n	80014b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e0:	f7ff fd2e 	bl	8000f40 <HAL_GetTick>
 80014e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014e6:	e009      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e8:	f7ff fd2a 	bl	8000f40 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f6:	d901      	bls.n	80014fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e007      	b.n	800150c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001508:	d1ee      	bne.n	80014e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e29b      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001540:	4b96      	ldr	r3, [pc, #600]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154c:	4b93      	ldr	r3, [pc, #588]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d112      	bne.n	800157e <HAL_RCC_OscConfig+0x62>
 8001558:	4b90      	ldr	r3, [pc, #576]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b8d      	ldr	r3, [pc, #564]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <HAL_RCC_OscConfig+0x130>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d168      	bne.n	800164c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e275      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x7a>
 8001588:	4b84      	ldr	r3, [pc, #528]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a83      	ldr	r2, [pc, #524]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0xd8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x9c>
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7e      	ldr	r2, [pc, #504]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7b      	ldr	r2, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xd8>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015c2:	4b76      	ldr	r3, [pc, #472]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a75      	ldr	r2, [pc, #468]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a72      	ldr	r2, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xd8>
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b6c      	ldr	r3, [pc, #432]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a6b      	ldr	r2, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fca0 	bl	8000f40 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc9c 	bl	8000f40 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e229      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fc8c 	bl	8000f40 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fc88 	bl	8000f40 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e215      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x110>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d069      	beq.n	800172e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11c      	bne.n	80016ac <HAL_RCC_OscConfig+0x190>
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x17a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e1e9      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	493d      	ldr	r1, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e040      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d023      	beq.n	80016fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a38      	ldr	r2, [pc, #224]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc3e 	bl	8000f40 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc3a 	bl	8000f40 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1c7      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4929      	ldr	r1, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x280>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fc1a 	bl	8000f40 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fc16 	bl	8000f40 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1a3      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d038      	beq.n	80017ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d019      	beq.n	8001776 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fbf7 	bl	8000f40 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fbf3 	bl	8000f40 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e180      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x23a>
 8001774:	e01a      	b.n	80017ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x280>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_RCC_OscConfig+0x280>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fbdd 	bl	8000f40 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fbd9 	bl	8000f40 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d903      	bls.n	80017a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e166      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
 800179c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a4 	beq.w	8001902 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a88      	ldr	r2, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b86      	ldr	r3, [pc, #536]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ee:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7f      	ldr	r2, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fba1 	bl	8000f40 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fb9d 	bl	8000f40 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e12a      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001814:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x31a>
 8001828:	4b70      	ldr	r3, [pc, #448]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a6f      	ldr	r2, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e02d      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x33c>
 800183e:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a67      	ldr	r2, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x35e>
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a61      	ldr	r2, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fb51 	bl	8000f40 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fb4d 	bl	8000f40 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0d8      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x386>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fb3b 	bl	8000f40 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fb37 	bl	8000f40 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0c2      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a3c      	ldr	r2, [pc, #240]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80ae 	beq.w	8001a68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d06d      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d14b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb08 	bl	8000f40 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fb04 	bl	8000f40 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e091      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	071b      	lsls	r3, r3, #28
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fad6 	bl	8000f40 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff fad2 	bl	8000f40 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e05f      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x47c>
 80019b6:	e057      	b.n	8001a68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fabc 	bl	8000f40 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fab8 	bl	8000f40 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e045      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x4b0>
 80019ea:	e03d      	b.n	8001a68 <HAL_RCC_OscConfig+0x54c>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_RCC_OscConfig+0x558>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d030      	beq.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d129      	bne.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d122      	bne.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d119      	bne.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10f      	bne.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0d0      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d910      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 020f 	bic.w	r2, r3, #15
 8001aa6:	4965      	ldr	r1, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d040      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d115      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e073      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06b      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4936      	ldr	r1, [pc, #216]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f9e8 	bl	8000f40 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f9e4 	bl	8000f40 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e053      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d210      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 020f 	bic.w	r2, r3, #15
 8001bb2:	4922      	ldr	r1, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1cc>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1d0>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1d4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f944 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08003308 	.word	0x08003308
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b090      	sub	sp, #64	; 0x40
 8001c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d00d      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	f200 80a1 	bhi.w	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c82:	e09b      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c88:	e09b      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c8e:	e098      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d028      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cbc:	fb03 f201 	mul.w	r2, r3, r1
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	fb00 f303 	mul.w	r3, r0, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cca:	fba0 1202 	umull	r1, r2, r0, r2
 8001cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	61fa      	str	r2, [r7, #28]
 8001ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cea:	f7fe fab7 	bl	800025c <__aeabi_uldivmod>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf6:	e053      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	2200      	movs	r2, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	617a      	str	r2, [r7, #20]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d0a:	f04f 0b00 	mov.w	fp, #0
 8001d0e:	4652      	mov	r2, sl
 8001d10:	465b      	mov	r3, fp
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ebb2 080a 	subs.w	r8, r2, sl
 8001d2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d42:	ebb2 0408 	subs.w	r4, r2, r8
 8001d46:	eb63 0509 	sbc.w	r5, r3, r9
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	00eb      	lsls	r3, r5, #3
 8001d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d58:	00e2      	lsls	r2, r4, #3
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	eb14 030a 	adds.w	r3, r4, sl
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	eb45 030b 	adc.w	r3, r5, fp
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d94:	f7fe fa62 	bl	800025c <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3740      	adds	r7, #64	; 0x40
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	017d7840 	.word	0x017d7840

08001ddc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08003318 	.word	0x08003318

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffdc 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08003318 	.word	0x08003318

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e6c:	4b69      	ldr	r3, [pc, #420]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a68      	ldr	r2, [pc, #416]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	4b66      	ldr	r3, [pc, #408]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	4964      	ldr	r1, [pc, #400]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	4959      	ldr	r1, [pc, #356]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eda:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	494a      	ldr	r1, [pc, #296]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef8:	d101      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808b 	beq.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a39      	ldr	r2, [pc, #228]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fff8 	bl	8000f40 <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe fff4 	bl	8000f40 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e38f      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d035      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d02e      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d114      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ffbc 	bl	8000f40 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe ffb8 	bl	8000f40 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e351      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ee      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ffa:	d111      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800200a:	400b      	ands	r3, r1
 800200c:	4901      	ldr	r1, [pc, #4]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
 8002012:	e00b      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000
 800201c:	0ffffcff 	.word	0x0ffffcff
 8002020:	4bac      	ldr	r3, [pc, #688]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4aab      	ldr	r2, [pc, #684]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800202a:	6093      	str	r3, [r2, #8]
 800202c:	4ba9      	ldr	r3, [pc, #676]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	49a6      	ldr	r1, [pc, #664]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	4313      	orrs	r3, r2
 800203c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800204a:	4ba2      	ldr	r3, [pc, #648]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002050:	4aa0      	ldr	r2, [pc, #640]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800205a:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	499b      	ldr	r1, [pc, #620]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002078:	4b96      	ldr	r3, [pc, #600]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002086:	4993      	ldr	r1, [pc, #588]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209a:	4b8e      	ldr	r3, [pc, #568]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a8:	498a      	ldr	r1, [pc, #552]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020bc:	4b85      	ldr	r3, [pc, #532]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ca:	4982      	ldr	r1, [pc, #520]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4979      	ldr	r1, [pc, #484]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002100:	4b74      	ldr	r3, [pc, #464]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4971      	ldr	r1, [pc, #452]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002122:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f023 020c 	bic.w	r2, r3, #12
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	4968      	ldr	r1, [pc, #416]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	4960      	ldr	r1, [pc, #384]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	4957      	ldr	r1, [pc, #348]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002188:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	494f      	ldr	r1, [pc, #316]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4946      	ldr	r1, [pc, #280]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	493e      	ldr	r1, [pc, #248]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800221e:	492d      	ldr	r1, [pc, #180]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002240:	4924      	ldr	r1, [pc, #144]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800224c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a4:	490b      	ldr	r1, [pc, #44]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c8:	4902      	ldr	r1, [pc, #8]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022d0:	e002      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022e4:	4b8a      	ldr	r3, [pc, #552]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	4986      	ldr	r1, [pc, #536]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002308:	4b81      	ldr	r3, [pc, #516]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002318:	497d      	ldr	r1, [pc, #500]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d006      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80d6 	beq.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002334:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a75      	ldr	r2, [pc, #468]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fdfe 	bl	8000f40 <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002348:	f7fe fdfa 	bl	8000f40 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e195      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d021      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11d      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	019a      	lsls	r2, r3, #6
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	4958      	ldr	r1, [pc, #352]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02e      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d129      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023e2:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	0f1b      	lsrs	r3, r3, #28
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	019a      	lsls	r2, r3, #6
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	493e      	ldr	r1, [pc, #248]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800241e:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002424:	f023 021f 	bic.w	r2, r3, #31
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	3b01      	subs	r3, #1
 800242e:	4938      	ldr	r1, [pc, #224]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01d      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002456:	0f1b      	lsrs	r3, r3, #28
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	4926      	ldr	r1, [pc, #152]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	071b      	lsls	r3, r3, #28
 80024a6:	491a      	ldr	r1, [pc, #104]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ba:	f7fe fd41 	bl	8000f40 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024c2:	f7fe fd3d 	bl	8000f40 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0d8      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 80ce 	bne.w	8002684 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fd24 	bl	8000f40 <HAL_GetTick>
 80024f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024fa:	e00b      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024fc:	f7fe fd20 	bl	8000f40 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d904      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0bb      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002514:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800251c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002520:	d0ec      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02e      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d12a      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	0f1b      	lsrs	r3, r3, #28
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	019a      	lsls	r2, r3, #6
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	061b      	lsls	r3, r3, #24
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	071b      	lsls	r3, r3, #28
 800257e:	4944      	ldr	r1, [pc, #272]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	493d      	ldr	r1, [pc, #244]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d022      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b4:	d11d      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	0e1b      	lsrs	r3, r3, #24
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	0f1b      	lsrs	r3, r3, #28
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	4929      	ldr	r1, [pc, #164]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	019a      	lsls	r2, r3, #6
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	4917      	ldr	r1, [pc, #92]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	4911      	ldr	r1, [pc, #68]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fc70 	bl	8000f40 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002664:	f7fe fc6c 	bl	8000f40 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002682:	d1ef      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e040      	b.n	8002728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fae6 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f974 	bl	80029c0 <UART_SetConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fbcc 	bl	8002e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fc53 	bl	8002fcc <UART_CheckIdleState>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002744:	2b20      	cmp	r3, #32
 8002746:	d171      	bne.n	800282c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x24>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e06a      	b.n	800282e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7fe fbeb 	bl	8000f40 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d108      	bne.n	8002798 <HAL_UART_Transmit+0x68>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e003      	b.n	80027a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a0:	e02c      	b.n	80027fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fc5a 	bl	8003066 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e038      	b.n	800282e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3302      	adds	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e007      	b.n	80027ea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1cc      	bne.n	80027a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fc27 	bl	8003066 <UART_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e005      	b.n	800282e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	; 0x28
 800283a:	af02      	add	r7, sp, #8
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284c:	2b20      	cmp	r3, #32
 800284e:	f040 80b1 	bne.w	80029b4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Receive+0x28>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0a9      	b.n	80029b6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2222      	movs	r2, #34	; 0x22
 800286e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb62 	bl	8000f40 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d10e      	bne.n	80028b6 <HAL_UART_Receive+0x80>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_UART_Receive+0x76>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028aa:	e02d      	b.n	8002908 <HAL_UART_Receive+0xd2>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028b4:	e028      	b.n	8002908 <HAL_UART_Receive+0xd2>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_UART_Receive+0xa4>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d104      	bne.n	80028d0 <HAL_UART_Receive+0x9a>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028ce:	e01b      	b.n	8002908 <HAL_UART_Receive+0xd2>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	227f      	movs	r2, #127	; 0x7f
 80028d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028d8:	e016      	b.n	8002908 <HAL_UART_Receive+0xd2>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e2:	d10d      	bne.n	8002900 <HAL_UART_Receive+0xca>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_UART_Receive+0xc0>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	227f      	movs	r2, #127	; 0x7f
 80028f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028f4:	e008      	b.n	8002908 <HAL_UART_Receive+0xd2>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028fe:	e003      	b.n	8002908 <HAL_UART_Receive+0xd2>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800290e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d108      	bne.n	800292c <HAL_UART_Receive+0xf6>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e003      	b.n	8002934 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002934:	e032      	b.n	800299c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2120      	movs	r1, #32
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fb90 	bl	8003066 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e032      	b.n	80029b6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b29a      	uxth	r2, r3
 800295e:	8a7b      	ldrh	r3, [r7, #18]
 8002960:	4013      	ands	r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	3302      	adds	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e00c      	b.n	800298a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8a7b      	ldrh	r3, [r7, #18]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4013      	ands	r3, r2
 800297e:	b2da      	uxtb	r2, r3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1c6      	bne.n	8002936 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4ba6      	ldr	r3, [pc, #664]	; (8002c84 <UART_SetConfig+0x2c4>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <UART_SetConfig+0x2c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d120      	bne.n	8002a7e <UART_SetConfig+0xbe>
 8002a3c:	4b93      	ldr	r3, [pc, #588]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d816      	bhi.n	8002a78 <UART_SetConfig+0xb8>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <UART_SetConfig+0x90>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a6d 	.word	0x08002a6d
 8002a58:	08002a67 	.word	0x08002a67
 8002a5c:	08002a73 	.word	0x08002a73
 8002a60:	2301      	movs	r3, #1
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e150      	b.n	8002d08 <UART_SetConfig+0x348>
 8002a66:	2302      	movs	r3, #2
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e14d      	b.n	8002d08 <UART_SetConfig+0x348>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e14a      	b.n	8002d08 <UART_SetConfig+0x348>
 8002a72:	2308      	movs	r3, #8
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e147      	b.n	8002d08 <UART_SetConfig+0x348>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e144      	b.n	8002d08 <UART_SetConfig+0x348>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a83      	ldr	r2, [pc, #524]	; (8002c90 <UART_SetConfig+0x2d0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d132      	bne.n	8002aee <UART_SetConfig+0x12e>
 8002a88:	4b80      	ldr	r3, [pc, #512]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d828      	bhi.n	8002ae8 <UART_SetConfig+0x128>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <UART_SetConfig+0xdc>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002ae9 	.word	0x08002ae9
 8002aa4:	08002ae9 	.word	0x08002ae9
 8002aa8:	08002ae9 	.word	0x08002ae9
 8002aac:	08002add 	.word	0x08002add
 8002ab0:	08002ae9 	.word	0x08002ae9
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002ae9 	.word	0x08002ae9
 8002abc:	08002ad7 	.word	0x08002ad7
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002ae9 	.word	0x08002ae9
 8002acc:	08002ae3 	.word	0x08002ae3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e118      	b.n	8002d08 <UART_SetConfig+0x348>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e115      	b.n	8002d08 <UART_SetConfig+0x348>
 8002adc:	2304      	movs	r3, #4
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e112      	b.n	8002d08 <UART_SetConfig+0x348>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e10f      	b.n	8002d08 <UART_SetConfig+0x348>
 8002ae8:	2310      	movs	r3, #16
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e10c      	b.n	8002d08 <UART_SetConfig+0x348>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <UART_SetConfig+0x2d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d120      	bne.n	8002b3a <UART_SetConfig+0x17a>
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b02:	2b30      	cmp	r3, #48	; 0x30
 8002b04:	d013      	beq.n	8002b2e <UART_SetConfig+0x16e>
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d814      	bhi.n	8002b34 <UART_SetConfig+0x174>
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d009      	beq.n	8002b22 <UART_SetConfig+0x162>
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d810      	bhi.n	8002b34 <UART_SetConfig+0x174>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <UART_SetConfig+0x15c>
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d006      	beq.n	8002b28 <UART_SetConfig+0x168>
 8002b1a:	e00b      	b.n	8002b34 <UART_SetConfig+0x174>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e0f2      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b22:	2302      	movs	r3, #2
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e0ef      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	e0ec      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	e0e9      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b34:	2310      	movs	r3, #16
 8002b36:	77fb      	strb	r3, [r7, #31]
 8002b38:	e0e6      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <UART_SetConfig+0x2d8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d120      	bne.n	8002b86 <UART_SetConfig+0x1c6>
 8002b44:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b50:	d013      	beq.n	8002b7a <UART_SetConfig+0x1ba>
 8002b52:	2bc0      	cmp	r3, #192	; 0xc0
 8002b54:	d814      	bhi.n	8002b80 <UART_SetConfig+0x1c0>
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d009      	beq.n	8002b6e <UART_SetConfig+0x1ae>
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d810      	bhi.n	8002b80 <UART_SetConfig+0x1c0>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <UART_SetConfig+0x1a8>
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d006      	beq.n	8002b74 <UART_SetConfig+0x1b4>
 8002b66:	e00b      	b.n	8002b80 <UART_SetConfig+0x1c0>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e0cc      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e0c9      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b74:	2304      	movs	r3, #4
 8002b76:	77fb      	strb	r3, [r7, #31]
 8002b78:	e0c6      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	77fb      	strb	r3, [r7, #31]
 8002b7e:	e0c3      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b80:	2310      	movs	r3, #16
 8002b82:	77fb      	strb	r3, [r7, #31]
 8002b84:	e0c0      	b.n	8002d08 <UART_SetConfig+0x348>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <UART_SetConfig+0x2dc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d125      	bne.n	8002bdc <UART_SetConfig+0x21c>
 8002b90:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b9e:	d017      	beq.n	8002bd0 <UART_SetConfig+0x210>
 8002ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ba4:	d817      	bhi.n	8002bd6 <UART_SetConfig+0x216>
 8002ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002baa:	d00b      	beq.n	8002bc4 <UART_SetConfig+0x204>
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d811      	bhi.n	8002bd6 <UART_SetConfig+0x216>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <UART_SetConfig+0x1fe>
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d006      	beq.n	8002bca <UART_SetConfig+0x20a>
 8002bbc:	e00b      	b.n	8002bd6 <UART_SetConfig+0x216>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e0a1      	b.n	8002d08 <UART_SetConfig+0x348>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e09e      	b.n	8002d08 <UART_SetConfig+0x348>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e09b      	b.n	8002d08 <UART_SetConfig+0x348>
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e098      	b.n	8002d08 <UART_SetConfig+0x348>
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e095      	b.n	8002d08 <UART_SetConfig+0x348>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <UART_SetConfig+0x2e0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d125      	bne.n	8002c32 <UART_SetConfig+0x272>
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf4:	d017      	beq.n	8002c26 <UART_SetConfig+0x266>
 8002bf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bfa:	d817      	bhi.n	8002c2c <UART_SetConfig+0x26c>
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c00:	d00b      	beq.n	8002c1a <UART_SetConfig+0x25a>
 8002c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c06:	d811      	bhi.n	8002c2c <UART_SetConfig+0x26c>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <UART_SetConfig+0x254>
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d006      	beq.n	8002c20 <UART_SetConfig+0x260>
 8002c12:	e00b      	b.n	8002c2c <UART_SetConfig+0x26c>
 8002c14:	2301      	movs	r3, #1
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e076      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e073      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c20:	2304      	movs	r3, #4
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e070      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c26:	2308      	movs	r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e06d      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e06a      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <UART_SetConfig+0x2e4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d138      	bne.n	8002cae <UART_SetConfig+0x2ee>
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <UART_SetConfig+0x2cc>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c4a:	d017      	beq.n	8002c7c <UART_SetConfig+0x2bc>
 8002c4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c50:	d82a      	bhi.n	8002ca8 <UART_SetConfig+0x2e8>
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c56:	d00b      	beq.n	8002c70 <UART_SetConfig+0x2b0>
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d824      	bhi.n	8002ca8 <UART_SetConfig+0x2e8>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <UART_SetConfig+0x2aa>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d006      	beq.n	8002c76 <UART_SetConfig+0x2b6>
 8002c68:	e01e      	b.n	8002ca8 <UART_SetConfig+0x2e8>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e04b      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c70:	2302      	movs	r3, #2
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e048      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c76:	2304      	movs	r3, #4
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e045      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e042      	b.n	8002d08 <UART_SetConfig+0x348>
 8002c82:	bf00      	nop
 8002c84:	efff69f3 	.word	0xefff69f3
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40004400 	.word	0x40004400
 8002c94:	40004800 	.word	0x40004800
 8002c98:	40004c00 	.word	0x40004c00
 8002c9c:	40005000 	.word	0x40005000
 8002ca0:	40011400 	.word	0x40011400
 8002ca4:	40007800 	.word	0x40007800
 8002ca8:	2310      	movs	r3, #16
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e02c      	b.n	8002d08 <UART_SetConfig+0x348>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a72      	ldr	r2, [pc, #456]	; (8002e7c <UART_SetConfig+0x4bc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d125      	bne.n	8002d04 <UART_SetConfig+0x344>
 8002cb8:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <UART_SetConfig+0x4c0>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cc6:	d017      	beq.n	8002cf8 <UART_SetConfig+0x338>
 8002cc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ccc:	d817      	bhi.n	8002cfe <UART_SetConfig+0x33e>
 8002cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd2:	d00b      	beq.n	8002cec <UART_SetConfig+0x32c>
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd8:	d811      	bhi.n	8002cfe <UART_SetConfig+0x33e>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <UART_SetConfig+0x326>
 8002cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ce2:	d006      	beq.n	8002cf2 <UART_SetConfig+0x332>
 8002ce4:	e00b      	b.n	8002cfe <UART_SetConfig+0x33e>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e00d      	b.n	8002d08 <UART_SetConfig+0x348>
 8002cec:	2302      	movs	r3, #2
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e00a      	b.n	8002d08 <UART_SetConfig+0x348>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e007      	b.n	8002d08 <UART_SetConfig+0x348>
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e004      	b.n	8002d08 <UART_SetConfig+0x348>
 8002cfe:	2310      	movs	r3, #16
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e001      	b.n	8002d08 <UART_SetConfig+0x348>
 8002d04:	2310      	movs	r3, #16
 8002d06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d10:	d15b      	bne.n	8002dca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d828      	bhi.n	8002d6a <UART_SetConfig+0x3aa>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0x360>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d45 	.word	0x08002d45
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	08002d55 	.word	0x08002d55
 8002d2c:	08002d6b 	.word	0x08002d6b
 8002d30:	08002d5b 	.word	0x08002d5b
 8002d34:	08002d6b 	.word	0x08002d6b
 8002d38:	08002d6b 	.word	0x08002d6b
 8002d3c:	08002d6b 	.word	0x08002d6b
 8002d40:	08002d63 	.word	0x08002d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d44:	f7ff f856 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002d48:	61b8      	str	r0, [r7, #24]
        break;
 8002d4a:	e013      	b.n	8002d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d4c:	f7ff f866 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002d50:	61b8      	str	r0, [r7, #24]
        break;
 8002d52:	e00f      	b.n	8002d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d54:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <UART_SetConfig+0x4c4>)
 8002d56:	61bb      	str	r3, [r7, #24]
        break;
 8002d58:	e00c      	b.n	8002d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7fe ff79 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002d5e:	61b8      	str	r0, [r7, #24]
        break;
 8002d60:	e008      	b.n	8002d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	61bb      	str	r3, [r7, #24]
        break;
 8002d68:	e004      	b.n	8002d74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	77bb      	strb	r3, [r7, #30]
        break;
 8002d72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d074      	beq.n	8002e64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	005a      	lsls	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d916      	bls.n	8002dc4 <UART_SetConfig+0x404>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d212      	bcs.n	8002dc4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f023 030f 	bic.w	r3, r3, #15
 8002da6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	89fa      	ldrh	r2, [r7, #14]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e04f      	b.n	8002e64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77bb      	strb	r3, [r7, #30]
 8002dc8:	e04c      	b.n	8002e64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d828      	bhi.n	8002e22 <UART_SetConfig+0x462>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0x418>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e23 	.word	0x08002e23
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe fffa 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002e00:	61b8      	str	r0, [r7, #24]
        break;
 8002e02:	e013      	b.n	8002e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7ff f80a 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002e08:	61b8      	str	r0, [r7, #24]
        break;
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <UART_SetConfig+0x4c4>)
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e00c      	b.n	8002e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7fe ff1d 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002e16:	61b8      	str	r0, [r7, #24]
        break;
 8002e18:	e008      	b.n	8002e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e004      	b.n	8002e2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77bb      	strb	r3, [r7, #30]
        break;
 8002e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d018      	beq.n	8002e64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085a      	lsrs	r2, r3, #1
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d909      	bls.n	8002e60 <UART_SetConfig+0x4a0>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e52:	d205      	bcs.n	8002e60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e001      	b.n	8002e64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40007c00 	.word	0x40007c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400

08002e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01a      	beq.n	8002f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f86:	d10a      	bne.n	8002f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fdc:	f7fd ffb0 	bl	8000f40 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d10e      	bne.n	800300e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f831 	bl	8003066 <UART_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e027      	b.n	800305e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d10e      	bne.n	800303a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f81b 	bl	8003066 <UART_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e011      	b.n	800305e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b09c      	sub	sp, #112	; 0x70
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003076:	e0a7      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307e:	f000 80a3 	beq.w	80031c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fd ff5d 	bl	8000f40 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <UART_WaitOnFlagUntilTimeout+0x32>
 8003092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13f      	bne.n	8003118 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ac:	667b      	str	r3, [r7, #100]	; 0x64
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e6      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	663b      	str	r3, [r7, #96]	; 0x60
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e068      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d050      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003134:	d148      	bne.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800313e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
 8003160:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e6      	bne.n	8003140 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3308      	adds	r3, #8
 8003178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	613b      	str	r3, [r7, #16]
   return(result);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	66bb      	str	r3, [r7, #104]	; 0x68
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003192:	623a      	str	r2, [r7, #32]
 8003194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e010      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f43f af48 	beq.w	8003078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3770      	adds	r7, #112	; 0x70
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <memset>:
 80031f2:	4402      	add	r2, r0
 80031f4:	4603      	mov	r3, r0
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d100      	bne.n	80031fc <memset+0xa>
 80031fa:	4770      	bx	lr
 80031fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003200:	e7f9      	b.n	80031f6 <memset+0x4>

08003202 <strcat>:
 8003202:	b510      	push	{r4, lr}
 8003204:	4602      	mov	r2, r0
 8003206:	7814      	ldrb	r4, [r2, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	3201      	adds	r2, #1
 800320c:	2c00      	cmp	r4, #0
 800320e:	d1fa      	bne.n	8003206 <strcat+0x4>
 8003210:	3b01      	subs	r3, #1
 8003212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800321a:	2a00      	cmp	r2, #0
 800321c:	d1f9      	bne.n	8003212 <strcat+0x10>
 800321e:	bd10      	pop	{r4, pc}

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4d0d      	ldr	r5, [pc, #52]	; (8003258 <__libc_init_array+0x38>)
 8003224:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	2600      	movs	r6, #0
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	4d0b      	ldr	r5, [pc, #44]	; (8003260 <__libc_init_array+0x40>)
 8003232:	4c0c      	ldr	r4, [pc, #48]	; (8003264 <__libc_init_array+0x44>)
 8003234:	f000 f826 	bl	8003284 <_init>
 8003238:	1b64      	subs	r4, r4, r5
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	2600      	movs	r6, #0
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	08003328 	.word	0x08003328
 800325c:	08003328 	.word	0x08003328
 8003260:	08003328 	.word	0x08003328
 8003264:	0800332c 	.word	0x0800332c

08003268 <memcpy>:
 8003268:	440a      	add	r2, r1
 800326a:	4291      	cmp	r1, r2
 800326c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003270:	d100      	bne.n	8003274 <memcpy+0xc>
 8003272:	4770      	bx	lr
 8003274:	b510      	push	{r4, lr}
 8003276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800327a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800327e:	4291      	cmp	r1, r2
 8003280:	d1f9      	bne.n	8003276 <memcpy+0xe>
 8003282:	bd10      	pop	{r4, pc}

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
