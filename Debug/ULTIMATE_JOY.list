
ULTIMATE_JOY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006cf0  08006cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d84  08006d84  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d8c  08006d8c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08006d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200000ac  08006e40  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08006e40  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001131d  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258d  00000000  00000000  0003143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bdf  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284ad  00000000  00000000  000354d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124a9  00000000  00000000  0005d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100660  00000000  00000000  0006fe2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000448c  00000000  00000000  00170490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0017491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000ac 	.word	0x200000ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08006cd8 	.word	0x08006cd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b0 	.word	0x200000b0
 800023c:	08006cd8 	.word	0x08006cd8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <toPortNumber>:
		GPIOF,		//13
		GPIOD,		//14
		GPIOD,		//15
		};

uint8_t toPortNumber(uint16_t GPIO_Pin) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	static const uint16_t possiblePins[EXTI_COUNT] = { GPIO_PIN_0, GPIO_PIN_1,
			GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6,
			GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
			GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, };
	for (uint8_t i = 0; i < 16; i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e00b      	b.n	8000614 <toPortNumber+0x28>
		if (GPIO_Pin == possiblePins[i])
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <toPortNumber+0x3c>)
 8000600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000604:	88fa      	ldrh	r2, [r7, #6]
 8000606:	429a      	cmp	r2, r3
 8000608:	d101      	bne.n	800060e <toPortNumber+0x22>
			return i;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	e006      	b.n	800061c <toPortNumber+0x30>
	for (uint8_t i = 0; i < 16; i++)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b0f      	cmp	r3, #15
 8000618:	d9f0      	bls.n	80005fc <toPortNumber+0x10>
	return 255;
 800061a:	23ff      	movs	r3, #255	; 0xff
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	08006d10 	.word	0x08006d10

0800062c <onButtonPinINT>:
volatile uint8_t pinLastTick[EXTI_COUNT] = { 0 };
// pullup configuration
//volatile uint8_t pinLastState[EXTI_COUNT] = { 0 };

// also debounce event -> may return null
ButtonStateEvent onButtonPinINT(uint16_t GPIO_Pin) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	uint8_t portNumber = toPortNumber(GPIO_Pin);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffd7 	bl	80005ec <toPortNumber>
 800063e:	4603      	mov	r3, r0
 8000640:	75fb      	strb	r3, [r7, #23]
	uint32_t currentTick = HAL_GetTick();
 8000642:	f001 f8af 	bl	80017a4 <HAL_GetTick>
 8000646:	6138      	str	r0, [r7, #16]
	uint8_t currentState = HAL_GPIO_ReadPin(portMapping[portNumber], GPIO_Pin);
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <onButtonPinINT+0x7c>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fc1b 	bl	8002e90 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]
	ButtonStateEvent event;
	event.button = 0xFF;
 800065e:	23ff      	movs	r3, #255	; 0xff
 8000660:	723b      	strb	r3, [r7, #8]
	if((currentTick - pinLastTick[portNumber] > debounce) /*&& (currentState != pinLastState[portNumber])*/){
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <onButtonPinINT+0x80>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	2b14      	cmp	r3, #20
 8000672:	d90b      	bls.n	800068c <onButtonPinINT+0x60>
		//allowed
		event.button = pinToButtonMapping[portNumber];
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <onButtonPinINT+0x84>)
 8000678:	5cd3      	ldrb	r3, [r2, r3]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	723b      	strb	r3, [r7, #8]
		event.state = currentState;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	727b      	strb	r3, [r7, #9]
//		pinLastState[portNumber] = currentState;
		pinLastTick[portNumber] = currentTick;
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	b2d1      	uxtb	r1, r2
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <onButtonPinINT+0x80>)
 800068a:	54d1      	strb	r1, [r2, r3]
	}
	return event;
 800068c:	893b      	ldrh	r3, [r7, #8]
 800068e:	81bb      	strh	r3, [r7, #12]
 8000690:	2300      	movs	r3, #0
 8000692:	7b3a      	ldrb	r2, [r7, #12]
 8000694:	f362 0307 	bfi	r3, r2, #0, #8
 8000698:	7b7a      	ldrb	r2, [r7, #13]
 800069a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000010 	.word	0x20000010
 80006ac:	200000c8 	.word	0x200000c8
 80006b0:	20000000 	.word	0x20000000

080006b4 <sendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendString(UART_HandleTypeDef huart, char *tosend) {
 80006b4:	b084      	sub	sp, #16
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	f107 0c08 	add.w	ip, r7, #8
 80006be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while (__HAL_UART_GET_FLAG(&huart,UART_FLAG_TC) == RESET) {
 80006c2:	bf00      	nop
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	2b40      	cmp	r3, #64	; 0x40
 80006ce:	d1f9      	bne.n	80006c4 <sendString+0x10>
	}
	HAL_UART_Transmit(&huart, (uint8_t*) tosend, strlen(tosend),
 80006d0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80006d4:	f7ff fdb4 	bl	8000240 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80006e4:	f107 0008 	add.w	r0, r7, #8
 80006e8:	f004 fb74 	bl	8004dd4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <DEBUGPRINTF>:

void DEBUGPRINTF(const char *format, ...) {
 80006f8:	b40f      	push	{r0, r1, r2, r3}
 80006fa:	b590      	push	{r4, r7, lr}
 80006fc:	b0a3      	sub	sp, #140	; 0x8c
 80006fe:	af20      	add	r7, sp, #128	; 0x80
	static char buffer[500]; // You can adjust the buffer size as needed
	va_list args;
	va_start(args, format);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), format, args);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <DEBUGPRINTF+0x48>)
 8000710:	f005 fe50 	bl	80063b4 <vsniprintf>
	va_end(args);
	sendString(huart3, buffer);
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <DEBUGPRINTF+0x4c>)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <DEBUGPRINTF+0x48>)
 8000718:	931e      	str	r3, [sp, #120]	; 0x78
 800071a:	4668      	mov	r0, sp
 800071c:	f104 0310 	add.w	r3, r4, #16
 8000720:	2278      	movs	r2, #120	; 0x78
 8000722:	4619      	mov	r1, r3
 8000724:	f005 fe88 	bl	8006438 <memcpy>
 8000728:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800072c:	f7ff ffc2 	bl	80006b4 <sendString>
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800073a:	b004      	add	sp, #16
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000308 	.word	0x20000308
 8000744:	20000254 	.word	0x20000254

08000748 <writeVibration>:
#define COMMAND_SIZE 5
volatile uint8_t command[COMMAND_SIZE] = { 0 };
volatile int16_t forces[2] = { 0 };
void writeVibration() {
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	// 0 is X axis
	if (forces[0] > 0) {
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <writeVibration+0xc8>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b21b      	sxth	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd12      	ble.n	800077c <writeVibration+0x34>
		htim3.Instance->CCR1 = (10000 - 1) * forces[0] / 255;
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <writeVibration+0xc8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b21b      	sxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	f242 730f 	movw	r3, #9999	; 0x270f
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <writeVibration+0xcc>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	441a      	add	r2, r3
 800076e:	11d2      	asrs	r2, r2, #7
 8000770:	17db      	asrs	r3, r3, #31
 8000772:	1ad2      	subs	r2, r2, r3
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <writeVibration+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
 800077a:	e015      	b.n	80007a8 <writeVibration+0x60>
	} else if (forces[0] < 0) {
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <writeVibration+0xc8>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b21b      	sxth	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	da10      	bge.n	80007a8 <writeVibration+0x60>
		htim3.Instance->CCR2 = (10000 - 1) * (-forces[0]) / 255;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <writeVibration+0xc8>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b21b      	sxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <writeVibration+0xd4>)
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <writeVibration+0xcc>)
 8000796:	fb82 1203 	smull	r1, r2, r2, r3
 800079a:	441a      	add	r2, r3
 800079c:	11d2      	asrs	r2, r2, #7
 800079e:	17db      	asrs	r3, r3, #31
 80007a0:	1ad2      	subs	r2, r2, r3
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <writeVibration+0xd0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (forces[1] > 0) {
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <writeVibration+0xc8>)
 80007aa:	885b      	ldrh	r3, [r3, #2]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dd12      	ble.n	80007d8 <writeVibration+0x90>
		htim3.Instance->CCR3 = (10000 - 1) * forces[1] / 255;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <writeVibration+0xc8>)
 80007b4:	885b      	ldrh	r3, [r3, #2]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <writeVibration+0xcc>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	441a      	add	r2, r3
 80007ca:	11d2      	asrs	r2, r2, #7
 80007cc:	17db      	asrs	r3, r3, #31
 80007ce:	1ad2      	subs	r2, r2, r3
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <writeVibration+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
	} else if (forces[1] < 0) {
		htim3.Instance->CCR4 = (10000 - 1) * (-forces[1]) / 255;
	}
}
 80007d6:	e015      	b.n	8000804 <writeVibration+0xbc>
	} else if (forces[1] < 0) {
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <writeVibration+0xc8>)
 80007da:	885b      	ldrh	r3, [r3, #2]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da10      	bge.n	8000804 <writeVibration+0xbc>
		htim3.Instance->CCR4 = (10000 - 1) * (-forces[1]) / 255;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <writeVibration+0xc8>)
 80007e4:	885b      	ldrh	r3, [r3, #2]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <writeVibration+0xd4>)
 80007ec:	fb02 f303 	mul.w	r3, r2, r3
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <writeVibration+0xcc>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	441a      	add	r2, r3
 80007f8:	11d2      	asrs	r2, r2, #7
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <writeVibration+0xd0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	200002e4 	.word	0x200002e4
 8000814:	80808081 	.word	0x80808081
 8000818:	20000180 	.word	0x20000180
 800081c:	ffffd8f1 	.word	0xffffd8f1

08000820 <setcmd_Button>:
void setcmd_Button(uint8_t button, uint8_t state) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	command[0] = 2;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <setcmd_Button+0x3c>)
 8000832:	2202      	movs	r2, #2
 8000834:	701a      	strb	r2, [r3, #0]
	command[1] = button;
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <setcmd_Button+0x3c>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	7053      	strb	r3, [r2, #1]
	command[2] = state;
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <setcmd_Button+0x3c>)
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	7093      	strb	r3, [r2, #2]
	command[3] = 0;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <setcmd_Button+0x3c>)
 8000844:	2200      	movs	r2, #0
 8000846:	70da      	strb	r2, [r3, #3]
	command[4] = 0;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <setcmd_Button+0x3c>)
 800084a:	2200      	movs	r2, #0
 800084c:	711a      	strb	r2, [r3, #4]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200002dc 	.word	0x200002dc

08000860 <setcmd_LeftXY>:
void setcmd_LeftXY(uint16_t x, uint16_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
	command[0] = 0;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <setcmd_LeftXY+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	command[1] = x >> 8;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <setcmd_LeftXY+0x4c>)
 8000880:	705a      	strb	r2, [r3, #1]
	command[2] = x & 0xFF;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <setcmd_LeftXY+0x4c>)
 8000888:	709a      	strb	r2, [r3, #2]
	command[3] = y >> 8;
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <setcmd_LeftXY+0x4c>)
 8000894:	70da      	strb	r2, [r3, #3]
	command[4] = y & 0xFF;
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <setcmd_LeftXY+0x4c>)
 800089c:	711a      	strb	r2, [r3, #4]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200002dc 	.word	0x200002dc

080008b0 <setcmd_RightXY>:
void setcmd_RightXY(uint16_t x, uint16_t y) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	setcmd_LeftXY(x, y);
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffca 	bl	8000860 <setcmd_LeftXY>
	command[0] = 1;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <setcmd_RightXY+0x2c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200002dc 	.word	0x200002dc

080008e0 <sendCommand>:

void sendCommand() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 80008e4:	bf00      	nop
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <sendCommand+0x28>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f0:	2b40      	cmp	r3, #64	; 0x40
 80008f2:	d1f8      	bne.n	80008e6 <sendCommand+0x6>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) command, COMMAND_SIZE,
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f8:	2205      	movs	r2, #5
 80008fa:	4904      	ldr	r1, [pc, #16]	; (800090c <sendCommand+0x2c>)
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <sendCommand+0x28>)
 80008fe:	f004 fa69 	bl	8004dd4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001cc 	.word	0x200001cc
 800090c:	200002dc 	.word	0x200002dc

08000910 <HAL_UART_RxCpltCallback>:

uint8_t Rx_uart3[COMMAND_SIZE];
uint8_t Rx_uart2[COMMAND_SIZE];
// receive vibration force info
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_RxCpltCallback+0x74>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_RxCpltCallback+0x6a>
		if (Rx_uart2[0] == 3) {
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d115      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x46>
			forces[0] = (Rx_uart2[1] << 8) | Rx_uart2[2];
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 8000934:	789b      	ldrb	r3, [r3, #2]
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21a      	sxth	r2, r3
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_RxCpltCallback+0x7c>)
 800093e:	801a      	strh	r2, [r3, #0]
			forces[1] = (Rx_uart2[3] << 8) | Rx_uart2[4];
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 8000942:	78db      	ldrb	r3, [r3, #3]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b21a      	sxth	r2, r3
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_UART_RxCpltCallback+0x7c>)
 8000954:	805a      	strh	r2, [r3, #2]
		}
		DEBUGPRINTF("Vibrate event:%d %d\n", forces[0], forces[1]);
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_UART_RxCpltCallback+0x7c>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b21b      	sxth	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_UART_RxCpltCallback+0x7c>)
 8000960:	885b      	ldrh	r3, [r3, #2]
 8000962:	b21b      	sxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <HAL_UART_RxCpltCallback+0x80>)
 8000968:	f7ff fec6 	bl	80006f8 <DEBUGPRINTF>
		writeVibration();
 800096c:	f7ff feec 	bl	8000748 <writeVibration>
		HAL_UART_Receive_IT(huart, Rx_uart2, COMMAND_SIZE);
 8000970:	2205      	movs	r2, #5
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <HAL_UART_RxCpltCallback+0x78>)
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f004 fab0 	bl	8004eda <HAL_UART_Receive_IT>
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	200002e8 	.word	0x200002e8
 800098c:	200002e4 	.word	0x200002e4
 8000990:	08006cf0 	.word	0x08006cf0

08000994 <HAL_ADC_ConvCpltCallback>:
#define adc_channel_count 4
volatile uint32_t adc_dma_result[adc_channel_count];
uint16_t prevStickState[adc_channel_count] = { 0 };
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800099c:	482e      	ldr	r0, [pc, #184]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xc4>)
 800099e:	f001 f86f 	bl	8001a80 <HAL_ADC_Stop_DMA>
	uint16_t x = adc_dma_result[0] / 4;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	81fb      	strh	r3, [r7, #14]
	uint16_t y = adc_dma_result[1] / 4;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	81bb      	strh	r3, [r7, #12]
	uint16_t Rx = adc_dma_result[2] / 4;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	817b      	strh	r3, [r7, #10]
	uint16_t Ry = adc_dma_result[3] / 4;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xc8>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	813b      	strh	r3, [r7, #8]
	if (prevStickState[0] != x || prevStickState[1] != y) {
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	89fa      	ldrh	r2, [r7, #14]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d104      	bne.n	80009d6 <HAL_ADC_ConvCpltCallback+0x42>
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	89ba      	ldrh	r2, [r7, #12]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d014      	beq.n	8000a00 <HAL_ADC_ConvCpltCallback+0x6c>
		prevStickState[0] = x;
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	8013      	strh	r3, [r2, #0]
		prevStickState[1] = y;
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	8053      	strh	r3, [r2, #2]
		setcmd_LeftXY(x, 1023 - y);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80009e8:	3303      	adds	r3, #3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <setcmd_LeftXY>
		sendCommand();
 80009f6:	f7ff ff73 	bl	80008e0 <sendCommand>
		HAL_Delay(3);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f000 fede 	bl	80017bc <HAL_Delay>
	}
	if (prevStickState[2] != Rx || prevStickState[3] != Ry) {
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	897a      	ldrh	r2, [r7, #10]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d104      	bne.n	8000a14 <HAL_ADC_ConvCpltCallback+0x80>
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a0c:	88db      	ldrh	r3, [r3, #6]
 8000a0e:	893a      	ldrh	r2, [r7, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d014      	beq.n	8000a3e <HAL_ADC_ConvCpltCallback+0xaa>
		prevStickState[2] = Rx;
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	8093      	strh	r3, [r2, #4]
		prevStickState[3] = Ry;
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000a1c:	893b      	ldrh	r3, [r7, #8]
 8000a1e:	80d3      	strh	r3, [r2, #6]
		setcmd_RightXY(Rx, 1023 - Ry);
 8000a20:	893b      	ldrh	r3, [r7, #8]
 8000a22:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000a26:	3303      	adds	r3, #3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	897b      	ldrh	r3, [r7, #10]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff3e 	bl	80008b0 <setcmd_RightXY>
		sendCommand();
 8000a34:	f7ff ff54 	bl	80008e0 <sendCommand>
		HAL_Delay(3);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 febf 	bl	80017bc <HAL_Delay>
	}
	HAL_Delay(3);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 febc 	bl	80017bc <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_result, adc_channel_count);
 8000a44:	2204      	movs	r2, #4
 8000a46:	4905      	ldr	r1, [pc, #20]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xc8>)
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000a4a:	f000 ff1f 	bl	800188c <HAL_ADC_Start_DMA>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	200002f0 	.word	0x200002f0
 8000a60:	20000300 	.word	0x20000300

08000a64 <HAL_GPIO_EXTI_Callback>:

// GPIO_EXT_0-15

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]

	ButtonStateEvent ev = onButtonPinINT(GPIO_Pin);
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fddb 	bl	800062c <onButtonPinINT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	81bb      	strh	r3, [r7, #12]
	if (ev.button == 0xFF)
 8000a7a:	7b3b      	ldrb	r3, [r7, #12]
 8000a7c:	2bff      	cmp	r3, #255	; 0xff
 8000a7e:	d00f      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x3c>
		return;
	setcmd_Button(ev.button, ev.state);
 8000a80:	7b3b      	ldrb	r3, [r7, #12]
 8000a82:	7b7a      	ldrb	r2, [r7, #13]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff feca 	bl	8000820 <setcmd_Button>
	sendCommand();
 8000a8c:	f7ff ff28 	bl	80008e0 <sendCommand>
	DEBUGPRINTF("%u %u\n", ev.button, ev.state);
 8000a90:	7b3b      	ldrb	r3, [r7, #12]
 8000a92:	4619      	mov	r1, r3
 8000a94:	7b7b      	ldrb	r3, [r7, #13]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000a9a:	f7ff fe2d 	bl	80006f8 <DEBUGPRINTF>
 8000a9e:	e000      	b.n	8000aa2 <HAL_GPIO_EXTI_Callback+0x3e>
		return;
 8000aa0:	bf00      	nop
}
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08006d08 	.word	0x08006d08

08000aac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab0:	f000 fe27 	bl	8001702 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab4:	f000 f832 	bl	8000b1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab8:	f000 fa14 	bl	8000ee4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000abc:	f000 f9f4 	bl	8000ea8 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ac0:	f000 f89a 	bl	8000bf8 <MX_ADC1_Init>
	MX_USART3_UART_Init();
 8000ac4:	f000 f9c0 	bl	8000e48 <MX_USART3_UART_Init>
	MX_USART2_UART_Init();
 8000ac8:	f000 f98e 	bl	8000de8 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000acc:	f000 f910 	bl	8000cf0 <MX_TIM3_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_result, adc_channel_count);
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <main+0x5c>)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <main+0x60>)
 8000ad6:	f000 fed9 	bl	800188c <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart2, Rx_uart2, COMMAND_SIZE);
 8000ada:	2205      	movs	r2, #5
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <main+0x64>)
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <main+0x68>)
 8000ae0:	f004 f9fb 	bl	8004eda <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <main+0x6c>)
 8000ae8:	f003 fb66 	bl	80041b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <main+0x6c>)
 8000af0:	f003 fb62 	bl	80041b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000af4:	2108      	movs	r1, #8
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <main+0x6c>)
 8000af8:	f003 fb5e 	bl	80041b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000afc:	210c      	movs	r1, #12
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <main+0x6c>)
 8000b00:	f003 fb5a 	bl	80041b8 <HAL_TIM_PWM_Start>
	while (1) {
 8000b04:	e7fe      	b.n	8000b04 <main+0x58>
 8000b06:	bf00      	nop
 8000b08:	200002f0 	.word	0x200002f0
 8000b0c:	200000d8 	.word	0x200000d8
 8000b10:	200002e8 	.word	0x200002e8
 8000b14:	200001cc 	.word	0x200001cc
 8000b18:	20000180 	.word	0x20000180

08000b1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	2234      	movs	r2, #52	; 0x34
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f005 fc50 	bl	80063d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <SystemClock_Config+0xd8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <SystemClock_Config+0xd8>)
 8000b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <SystemClock_Config+0xd8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000b88:	23d8      	movs	r3, #216	; 0xd8
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f9f7 	bl	8002f90 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x90>
		Error_Handler();
 8000ba8:	f000 fab8 	bl	800111c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000bac:	f002 f9a0 	bl	8002ef0 <HAL_PWREx_EnableOverDrive>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x9e>
		Error_Handler();
 8000bb6:	f000 fab1 	bl	800111c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fc87 	bl	80034ec <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xcc>
		Error_Handler();
 8000be4:	f000 fa9a 	bl	800111c <Error_Handler>
	}
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	; 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c0c:	4a36      	ldr	r2, [pc, #216]	; (8000ce8 <MX_ADC1_Init+0xf0>)
 8000c0e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000c10:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c16:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c3a:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <MX_ADC1_Init+0xf4>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8000c44:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c58:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c5a:	f000 fdd3 	bl	8001804 <HAL_ADC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000c64:	f000 fa5a 	bl	800111c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c7a:	f000 ff6f 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000c84:	f000 fa4a 	bl	800111c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000c96:	f000 ff61 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000ca0:	f000 fa3c 	bl	800111c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000cb2:	f000 ff53 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8000cbc:	f000 fa2e 	bl	800111c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_ADC1_Init+0xec>)
 8000cce:	f000 ff45 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0xe4>
		Error_Handler();
 8000cd8:	f000 fa20 	bl	800111c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000d8 	.word	0x200000d8
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	0f000001 	.word	0x0f000001

08000cf0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d16:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <MX_TIM3_Init+0xf4>)
 8000d18:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d1c:	2263      	movs	r2, #99	; 0x63
 8000d1e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000 - 1;
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d3c:	f003 f9e4 	bl	8004108 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x5a>
		Error_Handler();
 8000d46:	f000 f9e9 	bl	800111c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d5a:	f003 ff5f 	bl	8004c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000d64:	f000 f9da 	bl	800111c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 10000 / 4 - 1;
 8000d6c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000d70:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d82:	f003 fb13 	bl	80043ac <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM3_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 8000d8c:	f000 f9c6 	bl	800111c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000d90:	463b      	mov	r3, r7
 8000d92:	2204      	movs	r2, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000d98:	f003 fb08 	bl	80043ac <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8000da2:	f000 f9bb 	bl	800111c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2208      	movs	r2, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000dae:	f003 fafd 	bl	80043ac <HAL_TIM_PWM_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0xcc>
			!= HAL_OK) {
		Error_Handler();
 8000db8:	f000 f9b0 	bl	800111c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000dc4:	f003 faf2 	bl	80043ac <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0xe2>
			!= HAL_OK) {
		Error_Handler();
 8000dce:	f000 f9a5 	bl	800111c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM3_Init+0xf0>)
 8000dd4:	f000 fa9e 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000180 	.word	0x20000180
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <MX_USART2_UART_Init+0x5c>)
 8000df0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e14:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e18:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_USART2_UART_Init+0x58>)
 8000e2e:	f003 ff83 	bl	8004d38 <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART2_UART_Init+0x54>
		Error_Handler();
 8000e38:	f000 f970 	bl	800111c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001cc 	.word	0x200001cc
 8000e44:	40004400 	.word	0x40004400

08000e48 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <MX_USART3_UART_Init+0x5c>)
 8000e50:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART3_UART_Init+0x58>)
 8000e8c:	f003 ff54 	bl	8004d38 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000e96:	f000 f941 	bl	800111c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000254 	.word	0x20000254
 8000ea4:	40004800 	.word	0x40004800

08000ea8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_DMA_Init+0x38>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	2038      	movs	r0, #56	; 0x38
 8000ecc:	f001 f9f3 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ed0:	2038      	movs	r0, #56	; 0x38
 8000ed2:	f001 fa0c 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b81      	ldr	r3, [pc, #516]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a80      	ldr	r2, [pc, #512]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a7a      	ldr	r2, [pc, #488]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b75      	ldr	r3, [pc, #468]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a74      	ldr	r2, [pc, #464]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b72      	ldr	r3, [pc, #456]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a6e      	ldr	r2, [pc, #440]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5a:	4b69      	ldr	r3, [pc, #420]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a68      	ldr	r2, [pc, #416]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b63      	ldr	r3, [pc, #396]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a62      	ldr	r2, [pc, #392]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b60      	ldr	r3, [pc, #384]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a5c      	ldr	r2, [pc, #368]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <MX_GPIO_Init+0x21c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PA4 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7;
 8000fa2:	23d0      	movs	r3, #208	; 0xd0
 8000fa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fa6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000faa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fac:	2302      	movs	r3, #2
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4853      	ldr	r0, [pc, #332]	; (8001104 <MX_GPIO_Init+0x220>)
 8000fb8:	f001 fdbe 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	484b      	ldr	r0, [pc, #300]	; (8001104 <MX_GPIO_Init+0x220>)
 8000fd8:	f001 fdae 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB3 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5;
 8000fdc:	232c      	movs	r3, #44	; 0x2c
 8000fde:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fe0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fe4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4845      	ldr	r0, [pc, #276]	; (8001108 <MX_GPIO_Init+0x224>)
 8000ff2:	f001 fda1 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF12 PF13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000ff6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ffc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001000:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	483f      	ldr	r0, [pc, #252]	; (800110c <MX_GPIO_Init+0x228>)
 800100e:	f001 fd93 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001016:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800101a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101c:	2302      	movs	r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	483a      	ldr	r0, [pc, #232]	; (8001110 <MX_GPIO_Init+0x22c>)
 8001028:	f001 fd86 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE8 PE9 PE10 PE11
	 PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 800102c:	f640 7301 	movw	r3, #3841	; 0xf01
 8001030:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001032:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001036:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001038:	2302      	movs	r3, #2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4834      	ldr	r0, [pc, #208]	; (8001114 <MX_GPIO_Init+0x230>)
 8001044:	f001 fd78 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8001048:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800105a:	2301      	movs	r3, #1
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4828      	ldr	r0, [pc, #160]	; (8001108 <MX_GPIO_Init+0x224>)
 8001066:	f001 fd67 	bl	8002b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800106a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800106e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001070:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001074:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001076:	2302      	movs	r3, #2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4825      	ldr	r0, [pc, #148]	; (8001118 <MX_GPIO_Init+0x234>)
 8001082:	f001 fd59 	bl	8002b38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	2006      	movs	r0, #6
 800108c:	f001 f913 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001090:	2006      	movs	r0, #6
 8001092:	f001 f92c 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	2007      	movs	r0, #7
 800109c:	f001 f90b 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010a0:	2007      	movs	r0, #7
 80010a2:	f001 f924 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	2008      	movs	r0, #8
 80010ac:	f001 f903 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010b0:	2008      	movs	r0, #8
 80010b2:	f001 f91c 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2009      	movs	r0, #9
 80010bc:	f001 f8fb 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010c0:	2009      	movs	r0, #9
 80010c2:	f001 f914 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	200a      	movs	r0, #10
 80010cc:	f001 f8f3 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f001 f90c 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	2017      	movs	r0, #23
 80010dc:	f001 f8eb 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e0:	2017      	movs	r0, #23
 80010e2:	f001 f904 	bl	80022ee <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	2028      	movs	r0, #40	; 0x28
 80010ec:	f001 f8e3 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f001 f8fc 	bl	80022ee <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	; 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021000 	.word	0x40021000
 8001118:	40020c00 	.word	0x40020c00

0800111c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800115e:	2005      	movs	r0, #5
 8001160:	f001 f89e 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_ADC_MspInit+0x148>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 808d 	bne.w	80012ae <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	4a48      	ldr	r2, [pc, #288]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6453      	str	r3, [r2, #68]	; 0x44
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a36      	ldr	r2, [pc, #216]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <HAL_ADC_MspInit+0x14c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA0/WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f4:	2304      	movs	r3, #4
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	482e      	ldr	r0, [pc, #184]	; (80012c0 <HAL_ADC_MspInit+0x150>)
 8001208:	f001 fc96 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4829      	ldr	r0, [pc, #164]	; (80012c4 <HAL_ADC_MspInit+0x154>)
 8001220:	f001 fc8a 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <HAL_ADC_MspInit+0x158>)
 8001238:	f001 fc7e 	bl	8002b38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800123e:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <HAL_ADC_MspInit+0x160>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800127c:	2204      	movs	r2, #4
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001282:	2203      	movs	r2, #3
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 8001294:	f001 f846 	bl	8002324 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800129e:	f7ff ff3d 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_ADC_MspInit+0x15c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	20000120 	.word	0x20000120
 80012d0:	40026410 	.word	0x40026410

080012d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_TIM_PWM_MspInit+0x38>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10b      	bne.n	80012fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_TIM_PWM_MspInit+0x3c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_TIM_PWM_MspInit+0x3c>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_TIM_PWM_MspInit+0x3c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40000400 	.word	0x40000400
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_TIM_MspPostInit+0x64>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11c      	bne.n	8001370 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800134e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_TIM_MspPostInit+0x6c>)
 800136c:	f001 fbe4 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40000400 	.word	0x40000400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020800 	.word	0x40020800

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0b0      	sub	sp, #192	; 0xc0
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2290      	movs	r2, #144	; 0x90
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 f813 	bl	80063d0 <memset>
  if(huart->Instance==USART2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_UART_MspInit+0x154>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d143      	bne.n	800143c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fa79 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013cc:	f7ff fea6 	bl	800111c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a41      	ldr	r2, [pc, #260]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_UART_MspInit+0x158>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001400:	2378      	movs	r3, #120	; 0x78
 8001402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001422:	4619      	mov	r1, r3
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <HAL_UART_MspInit+0x15c>)
 8001426:	f001 fb87 	bl	8002b38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2101      	movs	r1, #1
 800142e:	2026      	movs	r0, #38	; 0x26
 8001430:	f000 ff41 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001434:	2026      	movs	r0, #38	; 0x26
 8001436:	f000 ff5a 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143a:	e049      	b.n	80014d0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_UART_MspInit+0x160>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d144      	bne.n	80014d0 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fa2f 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001460:	f7ff fe5c 	bl	800111c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_UART_MspInit+0x158>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_UART_MspInit+0x158>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_UART_MspInit+0x158>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x158>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_UART_MspInit+0x158>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_UART_MspInit+0x158>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ae:	2307      	movs	r3, #7
 80014b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b8:	4619      	mov	r1, r3
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_UART_MspInit+0x15c>)
 80014bc:	f001 fb3c 	bl	8002b38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	2027      	movs	r0, #39	; 0x27
 80014c6:	f000 fef6 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ca:	2027      	movs	r0, #39	; 0x27
 80014cc:	f000 ff0f 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 80014d0:	bf00      	nop
 80014d2:	37c0      	adds	r7, #192	; 0xc0
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40004800 	.word	0x40004800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f922 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001540:	2001      	movs	r0, #1
 8001542:	f001 fcbd 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800154e:	2002      	movs	r0, #2
 8001550:	f001 fcb6 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800155c:	2004      	movs	r0, #4
 800155e:	f001 fcaf 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}

08001566 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800156a:	2008      	movs	r0, #8
 800156c:	f001 fca8 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001578:	2010      	movs	r0, #16
 800157a:	f001 fca1 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001586:	2020      	movs	r0, #32
 8001588:	f001 fc9a 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800158c:	2040      	movs	r0, #64	; 0x40
 800158e:	f001 fc97 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001592:	2080      	movs	r0, #128	; 0x80
 8001594:	f001 fc94 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001598:	f44f 7080 	mov.w	r0, #256	; 0x100
 800159c:	f001 fc90 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a4:	f001 fc8c 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <USART2_IRQHandler+0x10>)
 80015b2:	f003 fcd7 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001cc 	.word	0x200001cc

080015c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <USART3_IRQHandler+0x10>)
 80015c6:	f003 fccd 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000254 	.word	0x20000254

080015d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015dc:	f001 fc70 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015e4:	f001 fc6c 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015ec:	f001 fc68 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f4:	f001 fc64 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015fc:	f001 fc60 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001604:	f001 fc5c 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA2_Stream0_IRQHandler+0x10>)
 8001612:	f001 f827 	bl	8002664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000120 	.word	0x20000120

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f004 fec6 	bl	80063e0 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20080000 	.word	0x20080000
 8001680:	00000400 	.word	0x00000400
 8001684:	200004fc 	.word	0x200004fc
 8001688:	20000650 	.word	0x20000650

0800168c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	; (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f004 fe85 	bl	80063ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f9e3 	bl	8000aac <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80016f4:	08006d94 	.word	0x08006d94
  ldr r2, =_sbss
 80016f8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80016fc:	2000064c 	.word	0x2000064c

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>

08001702 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f000 fdca 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170c:	2000      	movs	r0, #0
 800170e:	f000 f805 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001712:	f7ff fd09 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fde5 	bl	800230a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001758:	f000 fdad 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000050 	.word	0x20000050
 8001774:	20000058 	.word	0x20000058
 8001778:	20000054 	.word	0x20000054

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000058 	.word	0x20000058
 80017a0:	20000500 	.word	0x20000500

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000500 	.word	0x20000500

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000058 	.word	0x20000058

08001804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e031      	b.n	800187e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fca4 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_ADC_Init+0x84>)
 8001848:	4013      	ands	r3, r2
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fad8 	bl	8001e08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
 800186e:	e001      	b.n	8001874 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	ffffeefd 	.word	0xffffeefd

0800188c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e0d4      	b.n	8001a54 <HAL_ADC_Start_DMA+0x1c8>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d018      	beq.n	80018f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_ADC_Start_DMA+0x1d0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a62      	ldr	r2, [pc, #392]	; (8001a60 <HAL_ADC_Start_DMA+0x1d4>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9a      	lsrs	r2, r3, #18
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80018e4:	e002      	b.n	80018ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 809c 	bne.w	8001a3a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_ADC_Start_DMA+0x1d8>)
 8001908:	4013      	ands	r3, r2
 800190a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d106      	bne.n	800194c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f023 0206 	bic.w	r2, r3, #6
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
 800194a:	e002      	b.n	8001952 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <HAL_ADC_Start_DMA+0x1dc>)
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <HAL_ADC_Start_DMA+0x1e0>)
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	4a40      	ldr	r2, [pc, #256]	; (8001a70 <HAL_ADC_Start_DMA+0x1e4>)
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800197a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800198a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	334c      	adds	r3, #76	; 0x4c
 80019a6:	4619      	mov	r1, r3
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f000 fd68 	bl	8002480 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_ADC_Start_DMA+0x1e8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d143      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e03a      	b.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_ADC_Start_DMA+0x1ec>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10e      	bne.n	8001a04 <HAL_ADC_Start_DMA+0x178>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_ADC_Start_DMA+0x1e8>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d120      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_ADC_Start_DMA+0x1f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11b      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d114      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	e00b      	b.n	8001a52 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000050 	.word	0x20000050
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	fffff8fe 	.word	0xfffff8fe
 8001a68:	08001ffd 	.word	0x08001ffd
 8001a6c:	080020b7 	.word	0x080020b7
 8001a70:	080020d3 	.word	0x080020d3
 8001a74:	40012300 	.word	0x40012300
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	40012200 	.word	0x40012200

08001a80 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_Stop_DMA+0x1a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e046      	b.n	8001b28 <HAL_ADC_Stop_DMA+0xa8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d12e      	bne.n	8001b1e <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ace:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d10f      	bne.n	8001afe <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fd2c 	bl	8002540 <HAL_DMA_Abort>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b0c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_ADC_Stop_DMA+0xb0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	ffffeefe 	.word	0xffffeefe

08001b34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1c>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e136      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x28a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d93a      	bls.n	8001bfe <HAL_ADC_ConfigChannel+0xa2>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b90:	d035      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68d9      	ldr	r1, [r3, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	2207      	movs	r2, #7
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a8d      	ldr	r2, [pc, #564]	; (8001df4 <HAL_ADC_ConfigChannel+0x298>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	061a      	lsls	r2, r3, #24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	e035      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68d9      	ldr	r1, [r3, #12]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	3b1e      	subs	r3, #30
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfc:	e022      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d824      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b05      	subs	r3, #5
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b05      	subs	r3, #5
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34
 8001c94:	e04c      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d824      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b23      	subs	r3, #35	; 0x23
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b23      	subs	r3, #35	; 0x23
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce6:	e023      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b41      	subs	r3, #65	; 0x41
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b41      	subs	r3, #65	; 0x41
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <HAL_ADC_ConfigChannel+0x29c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10a      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1f4>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_ADC_ConfigChannel+0x29c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10f      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x21e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d10b      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d6c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_ADC_ConfigChannel+0x29c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d12b      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x280>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_ADC_ConfigChannel+0x298>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d003      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x23a>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b11      	cmp	r3, #17
 8001d94:	d122      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001d9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001da0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_ADC_ConfigChannel+0x298>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a8>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9a      	lsrs	r2, r3, #18
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dce:	e002      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	10000012 	.word	0x10000012
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	40012300 	.word	0x40012300
 8001e00:	20000050 	.word	0x20000050
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e10:	4b78      	ldr	r3, [pc, #480]	; (8001ff4 <ADC_Init+0x1ec>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <ADC_Init+0x1ec>)
 8001e16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e1a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <ADC_Init+0x1ec>)
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4973      	ldr	r1, [pc, #460]	; (8001ff4 <ADC_Init+0x1ec>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	021a      	lsls	r2, r3, #8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <ADC_Init+0x1f0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6899      	ldr	r1, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e00f      	b.n	8001f02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0202 	bic.w	r2, r2, #2
 8001f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	005a      	lsls	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6859      	ldr	r1, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	035a      	lsls	r2, r3, #13
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	e007      	b.n	8001f78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	051a      	lsls	r2, r3, #20
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6899      	ldr	r1, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fba:	025a      	lsls	r2, r3, #9
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	029a      	lsls	r2, r3, #10
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	0f000001 	.word	0x0f000001

08001ffc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002012:	2b00      	cmp	r3, #0
 8002014:	d13c      	bne.n	8002090 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d12b      	bne.n	8002088 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	d127      	bne.n	8002088 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002050:	2b00      	cmp	r3, #0
 8002052:	d119      	bne.n	8002088 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0220 	bic.w	r2, r2, #32
 8002062:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7fe fc83 	bl	8000994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800208e:	e00e      	b.n	80020ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7ff fd53 	bl	8001b48 <HAL_ADC_ErrorCallback>
}
 80020a2:	e004      	b.n	80020ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fd35 	bl	8001b34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f043 0204 	orr.w	r2, r3, #4
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fd28 	bl	8001b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	4313      	orrs	r3, r2
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00
 8002144:	05fa0000 	.word	0x05fa0000

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff fa38 	bl	80017a4 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e099      	b.n	8002474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002360:	e00f      	b.n	8002382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002362:	f7ff fa1f 	bl	80017a4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b05      	cmp	r3, #5
 800236e:	d908      	bls.n	8002382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e078      	b.n	8002474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e8      	bne.n	8002362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <HAL_DMA_Init+0x158>)
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4313      	orrs	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0307 	bic.w	r3, r3, #7
 8002402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b04      	cmp	r3, #4
 8002414:	d117      	bne.n	8002446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb09 	bl	8002a40 <DMA_CheckFifoParam>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002442:	2301      	movs	r3, #1
 8002444:	e016      	b.n	8002474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fac0 	bl	80029d4 <DMA_CalcBaseAndBitshift>
 8002454:	4603      	mov	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	223f      	movs	r2, #63	; 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	e010803f 	.word	0xe010803f

08002480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Start_IT+0x26>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e048      	b.n	8002538 <HAL_DMA_Start_IT+0xb8>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d137      	bne.n	800252a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa52 	bl	8002978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	223f      	movs	r2, #63	; 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0216 	orr.w	r2, r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e005      	b.n	8002536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800254e:	f7ff f929 	bl	80017a4 <HAL_GetTick>
 8002552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e052      	b.n	8002618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0216 	bic.w	r2, r2, #22
 8002580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <HAL_DMA_Abort+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0208 	bic.w	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	e013      	b.n	80025ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c4:	f7ff f8ee 	bl	80017a4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d90c      	bls.n	80025ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e015      	b.n	8002618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e4      	bne.n	80025c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	223f      	movs	r2, #63	; 0x3f
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d004      	beq.n	800263e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00c      	b.n	8002658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2205      	movs	r2, #5
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002670:	4b8e      	ldr	r3, [pc, #568]	; (80028ac <HAL_DMA_IRQHandler+0x248>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a8e      	ldr	r2, [pc, #568]	; (80028b0 <HAL_DMA_IRQHandler+0x24c>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0a9b      	lsrs	r3, r3, #10
 800267c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2208      	movs	r2, #8
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01a      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2208      	movs	r2, #8
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2201      	movs	r2, #1
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0202 	orr.w	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2204      	movs	r2, #4
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2204      	movs	r2, #4
 800272a:	409a      	lsls	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2210      	movs	r2, #16
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d043      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03c      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	2210      	movs	r2, #16
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d018      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d024      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
 8002792:	e01f      	b.n	80027d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01b      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
 80027a4:	e016      	b.n	80027d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0208 	bic.w	r2, r2, #8
 80027c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	2220      	movs	r2, #32
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 808f 	beq.w	8002904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8087 	beq.w	8002904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	2220      	movs	r2, #32
 80027fc:	409a      	lsls	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b05      	cmp	r3, #5
 800280c:	d136      	bne.n	800287c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0216 	bic.w	r2, r2, #22
 800281c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <HAL_DMA_IRQHandler+0x1da>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0208 	bic.w	r2, r2, #8
 800284c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	223f      	movs	r2, #63	; 0x3f
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286e:	2b00      	cmp	r3, #0
 8002870:	d07e      	beq.n	8002970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
        }
        return;
 800287a:	e079      	b.n	8002970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10d      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	2b00      	cmp	r3, #0
 800289e:	d031      	beq.n	8002904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
 80028a8:	e02c      	b.n	8002904 <HAL_DMA_IRQHandler+0x2a0>
 80028aa:	bf00      	nop
 80028ac:	20000050 	.word	0x20000050
 80028b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
 80028c4:	e01e      	b.n	8002904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0210 	bic.w	r2, r2, #16
 80028e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	2b00      	cmp	r3, #0
 800290a:	d032      	beq.n	8002972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d022      	beq.n	800295e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2205      	movs	r2, #5
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	3301      	adds	r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d307      	bcc.n	800294c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f2      	bne.n	8002930 <HAL_DMA_IRQHandler+0x2cc>
 800294a:	e000      	b.n	800294e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800294c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
 800296e:	e000      	b.n	8002972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002970:	bf00      	nop
    }
  }
}
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d108      	bne.n	80029b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029b6:	e007      	b.n	80029c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	60da      	str	r2, [r3, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3b10      	subs	r3, #16
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <DMA_CalcBaseAndBitshift+0x60>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <DMA_CalcBaseAndBitshift+0x64>)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d908      	bls.n	8002a14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <DMA_CalcBaseAndBitshift+0x68>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	1d1a      	adds	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
 8002a12:	e006      	b.n	8002a22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <DMA_CalcBaseAndBitshift+0x68>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	aaaaaaab 	.word	0xaaaaaaab
 8002a38:	08006d48 	.word	0x08006d48
 8002a3c:	fffffc00 	.word	0xfffffc00

08002a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11f      	bne.n	8002a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d856      	bhi.n	8002b0e <DMA_CheckFifoParam+0xce>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <DMA_CheckFifoParam+0x28>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a8b 	.word	0x08002a8b
 8002a70:	08002a79 	.word	0x08002a79
 8002a74:	08002b0f 	.word	0x08002b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d046      	beq.n	8002b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e043      	b.n	8002b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a92:	d140      	bne.n	8002b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a98:	e03d      	b.n	8002b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa2:	d121      	bne.n	8002ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d837      	bhi.n	8002b1a <DMA_CheckFifoParam+0xda>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <DMA_CheckFifoParam+0x70>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ac7 	.word	0x08002ac7
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002ad9 	.word	0x08002ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e030      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d025      	beq.n	8002b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad6:	e022      	b.n	8002b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ae6:	e01c      	b.n	8002b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d903      	bls.n	8002af6 <DMA_CheckFifoParam+0xb6>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d003      	beq.n	8002afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002af4:	e018      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      break;
 8002afa:	e015      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00e      	beq.n	8002b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e00b      	b.n	8002b26 <DMA_CheckFifoParam+0xe6>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e00a      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e008      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e006      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e004      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
    }
  } 
  
  return status; 
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	; 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e175      	b.n	8002e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	f040 8164 	bne.w	8002e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d005      	beq.n	8002b8e <HAL_GPIO_Init+0x56>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d130      	bne.n	8002bf0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 0201 	and.w	r2, r3, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d017      	beq.n	8002c2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d123      	bne.n	8002c80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	08da      	lsrs	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3208      	adds	r2, #8
 8002c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	220f      	movs	r2, #15
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	08da      	lsrs	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3208      	adds	r2, #8
 8002c7a:	69b9      	ldr	r1, [r7, #24]
 8002c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0203 	and.w	r2, r3, #3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80be 	beq.w	8002e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_GPIO_Init+0x324>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a65      	ldr	r2, [pc, #404]	; (8002e5c <HAL_GPIO_Init+0x324>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_GPIO_Init+0x324>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cda:	4a61      	ldr	r2, [pc, #388]	; (8002e60 <HAL_GPIO_Init+0x328>)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_GPIO_Init+0x32c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d037      	beq.n	8002d76 <HAL_GPIO_Init+0x23e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_GPIO_Init+0x330>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d031      	beq.n	8002d72 <HAL_GPIO_Init+0x23a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_GPIO_Init+0x334>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02b      	beq.n	8002d6e <HAL_GPIO_Init+0x236>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a55      	ldr	r2, [pc, #340]	; (8002e70 <HAL_GPIO_Init+0x338>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d025      	beq.n	8002d6a <HAL_GPIO_Init+0x232>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_GPIO_Init+0x33c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01f      	beq.n	8002d66 <HAL_GPIO_Init+0x22e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <HAL_GPIO_Init+0x340>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d019      	beq.n	8002d62 <HAL_GPIO_Init+0x22a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_GPIO_Init+0x344>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0x226>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a51      	ldr	r2, [pc, #324]	; (8002e80 <HAL_GPIO_Init+0x348>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_GPIO_Init+0x222>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_GPIO_Init+0x34c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_GPIO_Init+0x21e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	; (8002e88 <HAL_GPIO_Init+0x350>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x21a>
 8002d4e:	2309      	movs	r3, #9
 8002d50:	e012      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d52:	230a      	movs	r3, #10
 8002d54:	e010      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d56:	2308      	movs	r3, #8
 8002d58:	e00e      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d5e:	2306      	movs	r3, #6
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x240>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x328>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a34      	ldr	r2, [pc, #208]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a29      	ldr	r2, [pc, #164]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dea:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <HAL_GPIO_Init+0x354>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae86 	bls.w	8002b58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	40021c00 	.word	0x40021c00
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40022400 	.word	0x40022400
 8002e8c:	40013c00 	.word	0x40013c00

08002e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	e001      	b.n	8002eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fdc0 	bl	8000a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1e:	f7fe fc41 	bl	80017a4 <HAL_GetTick>
 8002f22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f24:	e009      	b.n	8002f3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f26:	f7fe fc3d 	bl	80017a4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f34:	d901      	bls.n	8002f3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e022      	b.n	8002f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f46:	d1ee      	bne.n	8002f26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f54:	f7fe fc26 	bl	80017a4 <HAL_GetTick>
 8002f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f5a:	e009      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f5c:	f7fe fc22 	bl	80017a4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6a:	d901      	bls.n	8002f70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e007      	b.n	8002f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e29b      	b.n	80034de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc0:	4b93      	ldr	r3, [pc, #588]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
 8002fcc:	4b90      	ldr	r3, [pc, #576]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x130>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e275      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x7a>
 8002ffc:	4b84      	ldr	r3, [pc, #528]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a83      	ldr	r2, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x9c>
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7e      	ldr	r2, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xc0>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a72      	ldr	r2, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 8003050:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fb98 	bl	80017a4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fb94 	bl	80017a4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e229      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fb84 	bl	80017a4 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fb80 	bl	80017a4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e215      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x110>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d069      	beq.n	80031a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1e9      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	493d      	ldr	r1, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e040      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fb36 	bl	80017a4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe fb32 	bl	80017a4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1c7      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4929      	ldr	r1, [pc, #164]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
 800316e:	e018      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fb12 	bl	80017a4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe fb0e 	bl	80017a4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1a3      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d038      	beq.n	8003220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe faef 	bl	80017a4 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe faeb 	bl	80017a4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e180      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x23a>
 80031e8:	e01a      	b.n	8003220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe fad5 	bl	80017a4 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe fad1 	bl	80017a4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d903      	bls.n	8003214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e166      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
 8003210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a4 	beq.w	8003376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a88      	ldr	r2, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b86      	ldr	r3, [pc, #536]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b83      	ldr	r3, [pc, #524]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003262:	4b80      	ldr	r3, [pc, #512]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7f      	ldr	r2, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe fa99 	bl	80017a4 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fa95 	bl	80017a4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e12a      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x31a>
 800329c:	4b70      	ldr	r3, [pc, #448]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x33c>
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x35e>
 80032d4:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a61      	ldr	r2, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fa49 	bl	80017a4 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fa45 	bl	80017a4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0d8      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x386>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fa33 	bl	80017a4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fa2f 	bl	80017a4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0c2      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a3c      	ldr	r2, [pc, #240]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80ae 	beq.w	80034dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d06d      	beq.n	8003468 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d14b      	bne.n	800342c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa00 	bl	80017a4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe f9fc 	bl	80017a4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e091      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f9ce 	bl	80017a4 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe f9ca 	bl	80017a4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e05f      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x47c>
 800342a:	e057      	b.n	80034dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe f9b4 	bl	80017a4 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe f9b0 	bl	80017a4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e045      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x4b0>
 800345e:	e03d      	b.n	80034dc <HAL_RCC_OscConfig+0x54c>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_RCC_OscConfig+0x558>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d030      	beq.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d129      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d122      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d10f      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0d0      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d910      	bls.n	8003534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	4965      	ldr	r1, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d040      	beq.n	8003610 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e073      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06b      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fe f8e0 	bl	80017a4 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fe f8dc 	bl	80017a4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e053      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d210      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 020f 	bic.w	r2, r3, #15
 8003626:	4922      	ldr	r1, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1d0>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f83c 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08006d30 	.word	0x08006d30
 80036bc:	20000050 	.word	0x20000050
 80036c0:	20000054 	.word	0x20000054

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e09b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036fc:	e09b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003702:	e098      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d028      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	627a      	str	r2, [r7, #36]	; 0x24
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800372c:	2100      	movs	r1, #0
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003730:	fb03 f201 	mul.w	r2, r3, r1
 8003734:	2300      	movs	r3, #0
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	4413      	add	r3, r2
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 800373e:	fba0 1202 	umull	r1, r2, r0, r2
 8003742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003744:	460a      	mov	r2, r1
 8003746:	62ba      	str	r2, [r7, #40]	; 0x28
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	4413      	add	r3, r2
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	2200      	movs	r2, #0
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800375e:	f7fc fdc7 	bl	80002f0 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4613      	mov	r3, r2
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376a:	e053      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	2200      	movs	r2, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	617a      	str	r2, [r7, #20]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	4652      	mov	r2, sl
 8003784:	465b      	mov	r3, fp
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003794:	0150      	lsls	r0, r2, #5
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	ebb2 080a 	subs.w	r8, r2, sl
 800379e:	eb63 090b 	sbc.w	r9, r3, fp
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037b6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ba:	eb63 0509 	sbc.w	r5, r3, r9
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	00eb      	lsls	r3, r5, #3
 80037c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037cc:	00e2      	lsls	r2, r4, #3
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	eb14 030a 	adds.w	r3, r4, sl
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	eb45 030b 	adc.w	r3, r5, fp
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	2200      	movs	r2, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	60fa      	str	r2, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	f7fc fd72 	bl	80002f0 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003838:	4618      	mov	r0, r3
 800383a:	3740      	adds	r7, #64	; 0x40
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	017d7840 	.word	0x017d7840

08003850 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000050 	.word	0x20000050

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	08006d40 	.word	0x08006d40

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08006d40 	.word	0x08006d40

080038b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d012      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038e0:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038ea:	6093      	str	r3, [r2, #8]
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	4964      	ldr	r1, [pc, #400]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	4959      	ldr	r1, [pc, #356]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800394e:	4b4e      	ldr	r3, [pc, #312]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003954:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	494a      	ldr	r1, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396c:	d101      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 808b 	beq.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
 80039a8:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039b4:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fd fef0 	bl	80017a4 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c8:	f7fd feec 	bl	80017a4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e38f      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d035      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d02e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a04:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a26:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d114      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd feb4 	bl	80017a4 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fd feb0 	bl	80017a4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e351      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a7e:	400b      	ands	r3, r1
 8003a80:	4901      	ldr	r1, [pc, #4]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	0ffffcff 	.word	0x0ffffcff
 8003a94:	4bac      	ldr	r3, [pc, #688]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4aab      	ldr	r2, [pc, #684]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a9e:	6093      	str	r3, [r2, #8]
 8003aa0:	4ba9      	ldr	r3, [pc, #676]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	49a6      	ldr	r1, [pc, #664]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003abe:	4ba2      	ldr	r3, [pc, #648]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac4:	4aa0      	ldr	r2, [pc, #640]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ace:	4b9e      	ldr	r3, [pc, #632]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	499b      	ldr	r1, [pc, #620]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aec:	4b96      	ldr	r3, [pc, #600]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afa:	4993      	ldr	r1, [pc, #588]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1c:	498a      	ldr	r1, [pc, #552]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b30:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3e:	4982      	ldr	r1, [pc, #520]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b52:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4979      	ldr	r1, [pc, #484]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b74:	4b74      	ldr	r3, [pc, #464]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	4971      	ldr	r1, [pc, #452]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 020c 	bic.w	r2, r3, #12
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	4968      	ldr	r1, [pc, #416]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb8:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	4960      	ldr	r1, [pc, #384]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bda:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	4957      	ldr	r1, [pc, #348]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bfc:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	494f      	ldr	r1, [pc, #316]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4946      	ldr	r1, [pc, #280]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	493e      	ldr	r1, [pc, #248]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	4935      	ldr	r1, [pc, #212]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c84:	4b30      	ldr	r3, [pc, #192]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c92:	492d      	ldr	r1, [pc, #180]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb4:	4924      	ldr	r1, [pc, #144]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	4914      	ldr	r1, [pc, #80]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d18:	490b      	ldr	r1, [pc, #44]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3c:	4902      	ldr	r1, [pc, #8]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d58:	4b8a      	ldr	r3, [pc, #552]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	4986      	ldr	r1, [pc, #536]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d7c:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8c:	497d      	ldr	r1, [pc, #500]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d006      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80d6 	beq.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da8:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd fcf6 	bl	80017a4 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dbc:	f7fd fcf2 	bl	80017a4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e195      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dce:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d021      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	0e1b      	lsrs	r3, r3, #24
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4958      	ldr	r1, [pc, #352]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02e      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e54:	d129      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e64:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6a:	0f1b      	lsrs	r3, r3, #28
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	019a      	lsls	r2, r3, #6
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	071b      	lsls	r3, r3, #28
 8003e8a:	493e      	ldr	r1, [pc, #248]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e92:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e98:	f023 021f 	bic.w	r2, r3, #31
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	4938      	ldr	r1, [pc, #224]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eb6:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	0f1b      	lsrs	r3, r3, #28
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	4926      	ldr	r1, [pc, #152]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d011      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	019a      	lsls	r2, r3, #6
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	071b      	lsls	r3, r3, #28
 8003f1a:	491a      	ldr	r1, [pc, #104]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fd fc39 	bl	80017a4 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f36:	f7fd fc35 	bl	80017a4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0d8      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	f040 80ce 	bne.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f68:	f7fd fc1c 	bl	80017a4 <HAL_GetTick>
 8003f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f70:	f7fd fc18 	bl	80017a4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d904      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0bb      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f94:	d0ec      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02e      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d12a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4944      	ldr	r1, [pc, #272]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ffa:	4b42      	ldr	r3, [pc, #264]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	493d      	ldr	r1, [pc, #244]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d022      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004028:	d11d      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402a:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	0e1b      	lsrs	r3, r3, #24
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	0f1b      	lsrs	r3, r3, #28
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	019a      	lsls	r2, r3, #6
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	431a      	orrs	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	4929      	ldr	r1, [pc, #164]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d028      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	0e1b      	lsrs	r3, r3, #24
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	019a      	lsls	r2, r3, #6
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	071b      	lsls	r3, r3, #28
 80040a6:	4917      	ldr	r1, [pc, #92]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4911      	ldr	r1, [pc, #68]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fd fb68 	bl	80017a4 <HAL_GetTick>
 80040d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040d8:	f7fd fb64 	bl	80017a4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e007      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f6:	d1ef      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e049      	b.n	80041ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd f8d0 	bl	80012d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 fa44 	bl	80045d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start+0x24>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e03c      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d109      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x3e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e02f      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start+0x58>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e022      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d109      	bne.n	800422a <HAL_TIM_PWM_Start+0x72>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e015      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d109      	bne.n	8004244 <HAL_TIM_PWM_Start+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e008      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e092      	b.n	8004384 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0xb6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	e023      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0xc6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	e01b      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xd6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	e013      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xe6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xf6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	e003      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc86 	bl	8004bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a30      	ldr	r2, [pc, #192]	; (800438c <HAL_TIM_PWM_Start+0x1d4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_PWM_Start+0x120>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2f      	ldr	r2, [pc, #188]	; (8004390 <HAL_TIM_PWM_Start+0x1d8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_PWM_Start+0x124>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_TIM_PWM_Start+0x126>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a25      	ldr	r2, [pc, #148]	; (800438c <HAL_TIM_PWM_Start+0x1d4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d01d      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_TIM_PWM_Start+0x1dc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a20      	ldr	r2, [pc, #128]	; (8004398 <HAL_TIM_PWM_Start+0x1e0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1f      	ldr	r2, [pc, #124]	; (800439c <HAL_TIM_PWM_Start+0x1e4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_TIM_PWM_Start+0x1d8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_TIM_PWM_Start+0x1e8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_TIM_PWM_Start+0x18a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_TIM_PWM_Start+0x1ec>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d115      	bne.n	800436e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <HAL_TIM_PWM_Start+0x1f0>)
 800434a:	4013      	ands	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d015      	beq.n	8004380 <HAL_TIM_PWM_Start+0x1c8>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d011      	beq.n	8004380 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	e008      	b.n	8004380 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e000      	b.n	8004382 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40001800 	.word	0x40001800
 80043a8:	00010007 	.word	0x00010007

080043ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0ff      	b.n	80045ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b14      	cmp	r3, #20
 80043d6:	f200 80f0 	bhi.w	80045ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004435 	.word	0x08004435
 80043e4:	080045bb 	.word	0x080045bb
 80043e8:	080045bb 	.word	0x080045bb
 80043ec:	080045bb 	.word	0x080045bb
 80043f0:	08004475 	.word	0x08004475
 80043f4:	080045bb 	.word	0x080045bb
 80043f8:	080045bb 	.word	0x080045bb
 80043fc:	080045bb 	.word	0x080045bb
 8004400:	080044b7 	.word	0x080044b7
 8004404:	080045bb 	.word	0x080045bb
 8004408:	080045bb 	.word	0x080045bb
 800440c:	080045bb 	.word	0x080045bb
 8004410:	080044f7 	.word	0x080044f7
 8004414:	080045bb 	.word	0x080045bb
 8004418:	080045bb 	.word	0x080045bb
 800441c:	080045bb 	.word	0x080045bb
 8004420:	08004539 	.word	0x08004539
 8004424:	080045bb 	.word	0x080045bb
 8004428:	080045bb 	.word	0x080045bb
 800442c:	080045bb 	.word	0x080045bb
 8004430:	08004579 	.word	0x08004579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f96a 	bl	8004714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0208 	orr.w	r2, r2, #8
 800444e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0204 	bic.w	r2, r2, #4
 800445e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6999      	ldr	r1, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	619a      	str	r2, [r3, #24]
      break;
 8004472:	e0a5      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f9bc 	bl	80047f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6999      	ldr	r1, [r3, #24]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	619a      	str	r2, [r3, #24]
      break;
 80044b4:	e084      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fa13 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0208 	orr.w	r2, r2, #8
 80044d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0204 	bic.w	r2, r2, #4
 80044e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69d9      	ldr	r1, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	61da      	str	r2, [r3, #28]
      break;
 80044f4:	e064      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa69 	bl	80049d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69d9      	ldr	r1, [r3, #28]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	021a      	lsls	r2, r3, #8
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	61da      	str	r2, [r3, #28]
      break;
 8004536:	e043      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 faa0 	bl	8004a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0208 	orr.w	r2, r2, #8
 8004552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0204 	bic.w	r2, r2, #4
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004576:	e023      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fad2 	bl	8004b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045b8:	e002      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
      break;
 80045be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3d      	ldr	r2, [pc, #244]	; (80046ec <TIM_Base_SetConfig+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d027      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <TIM_Base_SetConfig+0x118>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d023      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d017      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <TIM_Base_SetConfig+0x128>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <TIM_Base_SetConfig+0x12c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <TIM_Base_SetConfig+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a25      	ldr	r2, [pc, #148]	; (8004708 <TIM_Base_SetConfig+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <TIM_Base_SetConfig+0x138>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <TIM_Base_SetConfig+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	615a      	str	r2, [r3, #20]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40010400 	.word	0x40010400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	40001800 	.word	0x40001800
 800470c:	40001c00 	.word	0x40001c00
 8004710:	40002000 	.word	0x40002000

08004714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <TIM_OC1_SetConfig+0xd8>)
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0302 	bic.w	r3, r3, #2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <TIM_OC1_SetConfig+0xdc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC1_SetConfig+0x64>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <TIM_OC1_SetConfig+0xe0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0308 	bic.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <TIM_OC1_SetConfig+0xdc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC1_SetConfig+0x8e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <TIM_OC1_SetConfig+0xe0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d111      	bne.n	80047c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	fffeff8f 	.word	0xfffeff8f
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400

080047f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0210 	bic.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <TIM_OC2_SetConfig+0xe4>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0320 	bic.w	r3, r3, #32
 8004842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <TIM_OC2_SetConfig+0xe8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC2_SetConfig+0x68>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <TIM_OC2_SetConfig+0xec>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10d      	bne.n	800487c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <TIM_OC2_SetConfig+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0x94>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <TIM_OC2_SetConfig+0xec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	feff8fff 	.word	0xfeff8fff
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40010400 	.word	0x40010400

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <TIM_OC3_SetConfig+0xe0>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <TIM_OC3_SetConfig+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_OC3_SetConfig+0x66>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <TIM_OC3_SetConfig+0xe8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10d      	bne.n	800496a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <TIM_OC3_SetConfig+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_OC3_SetConfig+0x92>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <TIM_OC3_SetConfig+0xe8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d113      	bne.n	80049a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	621a      	str	r2, [r3, #32]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	fffeff8f 	.word	0xfffeff8f
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400

080049d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <TIM_OC4_SetConfig+0xa4>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <TIM_OC4_SetConfig+0xa8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC4_SetConfig+0x68>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <TIM_OC4_SetConfig+0xac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d109      	bne.n	8004a50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	feff8fff 	.word	0xfeff8fff
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400

08004a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <TIM_OC5_SetConfig+0x98>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <TIM_OC5_SetConfig+0x9c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_OC5_SetConfig+0x5e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <TIM_OC5_SetConfig+0xa0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d109      	bne.n	8004af6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	fffeff8f 	.word	0xfffeff8f
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40010400 	.word	0x40010400

08004b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <TIM_OC6_SetConfig+0x9c>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	051b      	lsls	r3, r3, #20
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <TIM_OC6_SetConfig+0xa0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC6_SetConfig+0x60>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <TIM_OC6_SetConfig+0xa4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d109      	bne.n	8004b9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	feff8fff 	.word	0xfeff8fff
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40010400 	.word	0x40010400

08004bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2201      	movs	r2, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1a      	ldr	r2, [r3, #32]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e06d      	b.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40001800 	.word	0x40001800

08004d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e040      	b.n	8004dcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fb12 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fc06 	bl	8005588 <UART_SetConfig>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e022      	b.n	8004dcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fe5e 	bl	8005a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fee5 	bl	8005b94 <UART_CheckIdleState>
 8004dca:	4603      	mov	r3, r0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d171      	bne.n	8004ed0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_UART_Transmit+0x24>
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e06a      	b.n	8004ed2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2221      	movs	r2, #33	; 0x21
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0a:	f7fc fccb 	bl	80017a4 <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d108      	bne.n	8004e3c <HAL_UART_Transmit+0x68>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e003      	b.n	8004e44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e44:	e02c      	b.n	8004ea0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 feec 	bl	8005c2e <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e038      	b.n	8004ed2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	3302      	adds	r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e007      	b.n	8004e8e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1cc      	bne.n	8004e46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2140      	movs	r1, #64	; 0x40
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 feb9 	bl	8005c2e <UART_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e005      	b.n	8004ed2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b08a      	sub	sp, #40	; 0x28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d132      	bne.n	8004f58 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_UART_Receive_IT+0x24>
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e02b      	b.n	8004f5a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69f9      	ldr	r1, [r7, #28]
 8004f3a:	6a3a      	ldr	r2, [r7, #32]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 ff34 	bl	8005dbc <UART_Start_Receive_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3728      	adds	r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b0ba      	sub	sp, #232	; 0xe8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f92:	4013      	ands	r3, r2
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d115      	bne.n	8004fcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 82ac 	beq.w	800551a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
      }
      return;
 8004fca:	e2a6      	b.n	800551a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8117 	beq.w	8005204 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fe6:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_UART_IRQHandler+0x298>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 810a 	beq.w	8005204 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0xbc>
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <HAL_UART_IRQHandler+0xec>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2202      	movs	r2, #2
 800503e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	f043 0204 	orr.w	r2, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d011      	beq.n	8005080 <HAL_UART_IRQHandler+0x11c>
 800505c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2204      	movs	r2, #4
 800506e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2208      	movs	r2, #8
 80050aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b2:	f043 0208 	orr.w	r2, r3, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d012      	beq.n	80050ee <HAL_UART_IRQHandler+0x18a>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8212 	beq.w	800551e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00d      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005128:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04f      	beq.n	80051e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fefe 	bl	8005f48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d141      	bne.n	80051de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800518a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1d9      	bne.n	800515a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_UART_IRQHandler+0x29c>)
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fa30 	bl	8002620 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e00f      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9b6 	bl	8005548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e00b      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9b2 	bl	8005548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e007      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9ae 	bl	8005548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80051f4:	e193      	b.n	800551e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	bf00      	nop
    return;
 80051f8:	e191      	b.n	800551e <HAL_UART_IRQHandler+0x5ba>
 80051fa:	bf00      	nop
 80051fc:	04000120 	.word	0x04000120
 8005200:	08006011 	.word	0x08006011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005208:	2b01      	cmp	r3, #1
 800520a:	f040 814c 	bne.w	80054a6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8145 	beq.w	80054a6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 813e 	beq.w	80054a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	f040 80b6 	bne.w	80053ae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800524e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8165 	beq.w	8005522 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800525e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005262:	429a      	cmp	r2, r3
 8005264:	f080 815d 	bcs.w	8005522 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527c:	f000 8086 	beq.w	800538c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1da      	bne.n	8005280 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e1      	bne.n	80052ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800532a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800532c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e3      	bne.n	8005306 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800535a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800536e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005370:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e4      	bne.n	800534c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd f8da 	bl	8002540 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8d8 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ac:	e0b9      	b.n	8005522 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80ab 	beq.w	8005526 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80053d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a6 	beq.w	8005526 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053fc:	647b      	str	r3, [r7, #68]	; 0x44
 80053fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e4      	bne.n	80053da <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	623b      	str	r3, [r7, #32]
   return(result);
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005434:	633a      	str	r2, [r7, #48]	; 0x30
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e3      	bne.n	8005410 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60fb      	str	r3, [r7, #12]
   return(result);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	617b      	str	r3, [r7, #20]
   return(result);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e4      	bne.n	800545c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f85c 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054a4:	e03f      	b.n	8005526 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00e      	beq.n	80054d0 <HAL_UART_IRQHandler+0x56c>
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f853 	bl	8005574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ce:	e02d      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01c      	beq.n	800552a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
    }
    return;
 80054f8:	e017      	b.n	800552a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d012      	beq.n	800552c <HAL_UART_IRQHandler+0x5c8>
 8005506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fd92 	bl	800603c <UART_EndTransmit_IT>
    return;
 8005518:	e008      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
      return;
 800551a:	bf00      	nop
 800551c:	e006      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
    return;
 800551e:	bf00      	nop
 8005520:	e004      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005522:	bf00      	nop
 8005524:	e002      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005526:	bf00      	nop
 8005528:	e000      	b.n	800552c <HAL_UART_IRQHandler+0x5c8>
    return;
 800552a:	bf00      	nop
  }

}
 800552c:	37e8      	adds	r7, #232	; 0xe8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4ba6      	ldr	r3, [pc, #664]	; (800584c <UART_SetConfig+0x2c4>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	430b      	orrs	r3, r1
 80055be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a94      	ldr	r2, [pc, #592]	; (8005850 <UART_SetConfig+0x2c8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d120      	bne.n	8005646 <UART_SetConfig+0xbe>
 8005604:	4b93      	ldr	r3, [pc, #588]	; (8005854 <UART_SetConfig+0x2cc>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d816      	bhi.n	8005640 <UART_SetConfig+0xb8>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x90>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	08005635 	.word	0x08005635
 8005620:	0800562f 	.word	0x0800562f
 8005624:	0800563b 	.word	0x0800563b
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e150      	b.n	80058d0 <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e14d      	b.n	80058d0 <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e14a      	b.n	80058d0 <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e147      	b.n	80058d0 <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e144      	b.n	80058d0 <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a83      	ldr	r2, [pc, #524]	; (8005858 <UART_SetConfig+0x2d0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d132      	bne.n	80056b6 <UART_SetConfig+0x12e>
 8005650:	4b80      	ldr	r3, [pc, #512]	; (8005854 <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d828      	bhi.n	80056b0 <UART_SetConfig+0x128>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <UART_SetConfig+0xdc>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005699 	.word	0x08005699
 8005668:	080056b1 	.word	0x080056b1
 800566c:	080056b1 	.word	0x080056b1
 8005670:	080056b1 	.word	0x080056b1
 8005674:	080056a5 	.word	0x080056a5
 8005678:	080056b1 	.word	0x080056b1
 800567c:	080056b1 	.word	0x080056b1
 8005680:	080056b1 	.word	0x080056b1
 8005684:	0800569f 	.word	0x0800569f
 8005688:	080056b1 	.word	0x080056b1
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b1 	.word	0x080056b1
 8005694:	080056ab 	.word	0x080056ab
 8005698:	2300      	movs	r3, #0
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e118      	b.n	80058d0 <UART_SetConfig+0x348>
 800569e:	2302      	movs	r3, #2
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e115      	b.n	80058d0 <UART_SetConfig+0x348>
 80056a4:	2304      	movs	r3, #4
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e112      	b.n	80058d0 <UART_SetConfig+0x348>
 80056aa:	2308      	movs	r3, #8
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e10f      	b.n	80058d0 <UART_SetConfig+0x348>
 80056b0:	2310      	movs	r3, #16
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e10c      	b.n	80058d0 <UART_SetConfig+0x348>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a68      	ldr	r2, [pc, #416]	; (800585c <UART_SetConfig+0x2d4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d120      	bne.n	8005702 <UART_SetConfig+0x17a>
 80056c0:	4b64      	ldr	r3, [pc, #400]	; (8005854 <UART_SetConfig+0x2cc>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056ca:	2b30      	cmp	r3, #48	; 0x30
 80056cc:	d013      	beq.n	80056f6 <UART_SetConfig+0x16e>
 80056ce:	2b30      	cmp	r3, #48	; 0x30
 80056d0:	d814      	bhi.n	80056fc <UART_SetConfig+0x174>
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d009      	beq.n	80056ea <UART_SetConfig+0x162>
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d810      	bhi.n	80056fc <UART_SetConfig+0x174>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <UART_SetConfig+0x15c>
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d006      	beq.n	80056f0 <UART_SetConfig+0x168>
 80056e2:	e00b      	b.n	80056fc <UART_SetConfig+0x174>
 80056e4:	2300      	movs	r3, #0
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e0f2      	b.n	80058d0 <UART_SetConfig+0x348>
 80056ea:	2302      	movs	r3, #2
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e0ef      	b.n	80058d0 <UART_SetConfig+0x348>
 80056f0:	2304      	movs	r3, #4
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e0ec      	b.n	80058d0 <UART_SetConfig+0x348>
 80056f6:	2308      	movs	r3, #8
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e0e9      	b.n	80058d0 <UART_SetConfig+0x348>
 80056fc:	2310      	movs	r3, #16
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e0e6      	b.n	80058d0 <UART_SetConfig+0x348>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a56      	ldr	r2, [pc, #344]	; (8005860 <UART_SetConfig+0x2d8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d120      	bne.n	800574e <UART_SetConfig+0x1c6>
 800570c:	4b51      	ldr	r3, [pc, #324]	; (8005854 <UART_SetConfig+0x2cc>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005716:	2bc0      	cmp	r3, #192	; 0xc0
 8005718:	d013      	beq.n	8005742 <UART_SetConfig+0x1ba>
 800571a:	2bc0      	cmp	r3, #192	; 0xc0
 800571c:	d814      	bhi.n	8005748 <UART_SetConfig+0x1c0>
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d009      	beq.n	8005736 <UART_SetConfig+0x1ae>
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d810      	bhi.n	8005748 <UART_SetConfig+0x1c0>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <UART_SetConfig+0x1a8>
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d006      	beq.n	800573c <UART_SetConfig+0x1b4>
 800572e:	e00b      	b.n	8005748 <UART_SetConfig+0x1c0>
 8005730:	2300      	movs	r3, #0
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e0cc      	b.n	80058d0 <UART_SetConfig+0x348>
 8005736:	2302      	movs	r3, #2
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e0c9      	b.n	80058d0 <UART_SetConfig+0x348>
 800573c:	2304      	movs	r3, #4
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e0c6      	b.n	80058d0 <UART_SetConfig+0x348>
 8005742:	2308      	movs	r3, #8
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e0c3      	b.n	80058d0 <UART_SetConfig+0x348>
 8005748:	2310      	movs	r3, #16
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e0c0      	b.n	80058d0 <UART_SetConfig+0x348>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a44      	ldr	r2, [pc, #272]	; (8005864 <UART_SetConfig+0x2dc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d125      	bne.n	80057a4 <UART_SetConfig+0x21c>
 8005758:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <UART_SetConfig+0x2cc>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d017      	beq.n	8005798 <UART_SetConfig+0x210>
 8005768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576c:	d817      	bhi.n	800579e <UART_SetConfig+0x216>
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	d00b      	beq.n	800578c <UART_SetConfig+0x204>
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d811      	bhi.n	800579e <UART_SetConfig+0x216>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <UART_SetConfig+0x1fe>
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d006      	beq.n	8005792 <UART_SetConfig+0x20a>
 8005784:	e00b      	b.n	800579e <UART_SetConfig+0x216>
 8005786:	2300      	movs	r3, #0
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e0a1      	b.n	80058d0 <UART_SetConfig+0x348>
 800578c:	2302      	movs	r3, #2
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e09e      	b.n	80058d0 <UART_SetConfig+0x348>
 8005792:	2304      	movs	r3, #4
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e09b      	b.n	80058d0 <UART_SetConfig+0x348>
 8005798:	2308      	movs	r3, #8
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e098      	b.n	80058d0 <UART_SetConfig+0x348>
 800579e:	2310      	movs	r3, #16
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e095      	b.n	80058d0 <UART_SetConfig+0x348>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <UART_SetConfig+0x2e0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d125      	bne.n	80057fa <UART_SetConfig+0x272>
 80057ae:	4b29      	ldr	r3, [pc, #164]	; (8005854 <UART_SetConfig+0x2cc>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057bc:	d017      	beq.n	80057ee <UART_SetConfig+0x266>
 80057be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c2:	d817      	bhi.n	80057f4 <UART_SetConfig+0x26c>
 80057c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c8:	d00b      	beq.n	80057e2 <UART_SetConfig+0x25a>
 80057ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ce:	d811      	bhi.n	80057f4 <UART_SetConfig+0x26c>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <UART_SetConfig+0x254>
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d8:	d006      	beq.n	80057e8 <UART_SetConfig+0x260>
 80057da:	e00b      	b.n	80057f4 <UART_SetConfig+0x26c>
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e076      	b.n	80058d0 <UART_SetConfig+0x348>
 80057e2:	2302      	movs	r3, #2
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e073      	b.n	80058d0 <UART_SetConfig+0x348>
 80057e8:	2304      	movs	r3, #4
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e070      	b.n	80058d0 <UART_SetConfig+0x348>
 80057ee:	2308      	movs	r3, #8
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	e06d      	b.n	80058d0 <UART_SetConfig+0x348>
 80057f4:	2310      	movs	r3, #16
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e06a      	b.n	80058d0 <UART_SetConfig+0x348>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <UART_SetConfig+0x2e4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d138      	bne.n	8005876 <UART_SetConfig+0x2ee>
 8005804:	4b13      	ldr	r3, [pc, #76]	; (8005854 <UART_SetConfig+0x2cc>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800580e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005812:	d017      	beq.n	8005844 <UART_SetConfig+0x2bc>
 8005814:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005818:	d82a      	bhi.n	8005870 <UART_SetConfig+0x2e8>
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	d00b      	beq.n	8005838 <UART_SetConfig+0x2b0>
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005824:	d824      	bhi.n	8005870 <UART_SetConfig+0x2e8>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <UART_SetConfig+0x2aa>
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582e:	d006      	beq.n	800583e <UART_SetConfig+0x2b6>
 8005830:	e01e      	b.n	8005870 <UART_SetConfig+0x2e8>
 8005832:	2300      	movs	r3, #0
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e04b      	b.n	80058d0 <UART_SetConfig+0x348>
 8005838:	2302      	movs	r3, #2
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e048      	b.n	80058d0 <UART_SetConfig+0x348>
 800583e:	2304      	movs	r3, #4
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e045      	b.n	80058d0 <UART_SetConfig+0x348>
 8005844:	2308      	movs	r3, #8
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e042      	b.n	80058d0 <UART_SetConfig+0x348>
 800584a:	bf00      	nop
 800584c:	efff69f3 	.word	0xefff69f3
 8005850:	40011000 	.word	0x40011000
 8005854:	40023800 	.word	0x40023800
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	40004c00 	.word	0x40004c00
 8005864:	40005000 	.word	0x40005000
 8005868:	40011400 	.word	0x40011400
 800586c:	40007800 	.word	0x40007800
 8005870:	2310      	movs	r3, #16
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e02c      	b.n	80058d0 <UART_SetConfig+0x348>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a72      	ldr	r2, [pc, #456]	; (8005a44 <UART_SetConfig+0x4bc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d125      	bne.n	80058cc <UART_SetConfig+0x344>
 8005880:	4b71      	ldr	r3, [pc, #452]	; (8005a48 <UART_SetConfig+0x4c0>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800588a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800588e:	d017      	beq.n	80058c0 <UART_SetConfig+0x338>
 8005890:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005894:	d817      	bhi.n	80058c6 <UART_SetConfig+0x33e>
 8005896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589a:	d00b      	beq.n	80058b4 <UART_SetConfig+0x32c>
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	d811      	bhi.n	80058c6 <UART_SetConfig+0x33e>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <UART_SetConfig+0x326>
 80058a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058aa:	d006      	beq.n	80058ba <UART_SetConfig+0x332>
 80058ac:	e00b      	b.n	80058c6 <UART_SetConfig+0x33e>
 80058ae:	2300      	movs	r3, #0
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e00d      	b.n	80058d0 <UART_SetConfig+0x348>
 80058b4:	2302      	movs	r3, #2
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e00a      	b.n	80058d0 <UART_SetConfig+0x348>
 80058ba:	2304      	movs	r3, #4
 80058bc:	77fb      	strb	r3, [r7, #31]
 80058be:	e007      	b.n	80058d0 <UART_SetConfig+0x348>
 80058c0:	2308      	movs	r3, #8
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e004      	b.n	80058d0 <UART_SetConfig+0x348>
 80058c6:	2310      	movs	r3, #16
 80058c8:	77fb      	strb	r3, [r7, #31]
 80058ca:	e001      	b.n	80058d0 <UART_SetConfig+0x348>
 80058cc:	2310      	movs	r3, #16
 80058ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	d15b      	bne.n	8005992 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058da:	7ffb      	ldrb	r3, [r7, #31]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d828      	bhi.n	8005932 <UART_SetConfig+0x3aa>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x360>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005915 	.word	0x08005915
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005933 	.word	0x08005933
 80058f8:	08005923 	.word	0x08005923
 80058fc:	08005933 	.word	0x08005933
 8005900:	08005933 	.word	0x08005933
 8005904:	08005933 	.word	0x08005933
 8005908:	0800592b 	.word	0x0800592b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fd ffac 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8005910:	61b8      	str	r0, [r7, #24]
        break;
 8005912:	e013      	b.n	800593c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fd ffbc 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8005918:	61b8      	str	r0, [r7, #24]
        break;
 800591a:	e00f      	b.n	800593c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <UART_SetConfig+0x4c4>)
 800591e:	61bb      	str	r3, [r7, #24]
        break;
 8005920:	e00c      	b.n	800593c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7fd fecf 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005926:	61b8      	str	r0, [r7, #24]
        break;
 8005928:	e008      	b.n	800593c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592e:	61bb      	str	r3, [r7, #24]
        break;
 8005930:	e004      	b.n	800593c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	77bb      	strb	r3, [r7, #30]
        break;
 800593a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d074      	beq.n	8005a2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	005a      	lsls	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	441a      	add	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d916      	bls.n	800598c <UART_SetConfig+0x404>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005964:	d212      	bcs.n	800598c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	b29a      	uxth	r2, r3
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4313      	orrs	r3, r2
 8005980:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	89fa      	ldrh	r2, [r7, #14]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e04f      	b.n	8005a2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	77bb      	strb	r3, [r7, #30]
 8005990:	e04c      	b.n	8005a2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	2b08      	cmp	r3, #8
 8005996:	d828      	bhi.n	80059ea <UART_SetConfig+0x462>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x418>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	080059eb 	.word	0x080059eb
 80059b0:	080059db 	.word	0x080059db
 80059b4:	080059eb 	.word	0x080059eb
 80059b8:	080059eb 	.word	0x080059eb
 80059bc:	080059eb 	.word	0x080059eb
 80059c0:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c4:	f7fd ff50 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 80059c8:	61b8      	str	r0, [r7, #24]
        break;
 80059ca:	e013      	b.n	80059f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fd ff60 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 80059d0:	61b8      	str	r0, [r7, #24]
        break;
 80059d2:	e00f      	b.n	80059f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <UART_SetConfig+0x4c4>)
 80059d6:	61bb      	str	r3, [r7, #24]
        break;
 80059d8:	e00c      	b.n	80059f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059da:	f7fd fe73 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80059de:	61b8      	str	r0, [r7, #24]
        break;
 80059e0:	e008      	b.n	80059f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e004      	b.n	80059f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	77bb      	strb	r3, [r7, #30]
        break;
 80059f2:	bf00      	nop
    }

    if (pclk != 0U)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085a      	lsrs	r2, r3, #1
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	441a      	add	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d909      	bls.n	8005a28 <UART_SetConfig+0x4a0>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1a:	d205      	bcs.n	8005a28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	e001      	b.n	8005a2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a38:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40007c00 	.word	0x40007c00
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	00f42400 	.word	0x00f42400

08005a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4e:	d10a      	bne.n	8005b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ba4:	f7fb fdfe 	bl	80017a4 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10e      	bne.n	8005bd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f831 	bl	8005c2e <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e027      	b.n	8005c26 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d10e      	bne.n	8005c02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f81b 	bl	8005c2e <UART_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e011      	b.n	8005c26 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b09c      	sub	sp, #112	; 0x70
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3e:	e0a7      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c46:	f000 80a3 	beq.w	8005d90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fb fdab 	bl	80017a4 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d13f      	bne.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c74:	667b      	str	r3, [r7, #100]	; 0x64
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e068      	b.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d050      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfc:	d148      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
 8005d28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e6      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	613b      	str	r3, [r7, #16]
   return(result);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d5a:	623a      	str	r2, [r7, #32]
 8005d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e010      	b.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	f43f af48 	beq.w	8005c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3770      	adds	r7, #112	; 0x70
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b097      	sub	sp, #92	; 0x5c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d10e      	bne.n	8005e0e <UART_Start_Receive_IT+0x52>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <UART_Start_Receive_IT+0x48>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e02:	e02d      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e0c:	e028      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <UART_Start_Receive_IT+0x76>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <UART_Start_Receive_IT+0x6c>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22ff      	movs	r2, #255	; 0xff
 8005e22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e26:	e01b      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	227f      	movs	r2, #127	; 0x7f
 8005e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e30:	e016      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3a:	d10d      	bne.n	8005e58 <UART_Start_Receive_IT+0x9c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <UART_Start_Receive_IT+0x92>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	227f      	movs	r2, #127	; 0x7f
 8005e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e4c:	e008      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	223f      	movs	r2, #63	; 0x3f
 8005e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e56:	e003      	b.n	8005e60 <UART_Start_Receive_IT+0xa4>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2222      	movs	r2, #34	; 0x22
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	657b      	str	r3, [r7, #84]	; 0x54
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e90:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e5      	bne.n	8005e70 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eac:	d107      	bne.n	8005ebe <UART_Start_Receive_IT+0x102>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <UART_Start_Receive_IT+0x184>)
 8005eba:	669a      	str	r2, [r3, #104]	; 0x68
 8005ebc:	e002      	b.n	8005ec4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <UART_Start_Receive_IT+0x188>)
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d019      	beq.n	8005f00 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
 8005eec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e6      	bne.n	8005ecc <UART_Start_Receive_IT+0x110>
 8005efe:	e018      	b.n	8005f32 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f043 0320 	orr.w	r3, r3, #32
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	69f9      	ldr	r1, [r7, #28]
 8005f24:	6a3a      	ldr	r2, [r7, #32]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e6      	bne.n	8005f00 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	375c      	adds	r7, #92	; 0x5c
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	080061f7 	.word	0x080061f7
 8005f44:	08006091 	.word	0x08006091

08005f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b095      	sub	sp, #84	; 0x54
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d118      	bne.n	8005ff0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6979      	ldr	r1, [r7, #20]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e6      	bne.n	8005fbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006004:	bf00      	nop
 8006006:	3754      	adds	r7, #84	; 0x54
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff fa8a 	bl	8005548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	60bb      	str	r3, [r7, #8]
   return(result);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6979      	ldr	r1, [r7, #20]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	613b      	str	r3, [r7, #16]
   return(result);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e6      	bne.n	8006044 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fa56 	bl	8005534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006088:	bf00      	nop
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b096      	sub	sp, #88	; 0x58
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800609e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a8:	2b22      	cmp	r3, #34	; 0x22
 80060aa:	f040 8098 	bne.w	80061de <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80060bc:	b2d9      	uxtb	r1, r3
 80060be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	400a      	ands	r2, r1
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d17b      	bne.n	80061ee <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610a:	653b      	str	r3, [r7, #80]	; 0x50
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
 8006116:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800611a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	623b      	str	r3, [r7, #32]
   return(result);
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006148:	633a      	str	r2, [r7, #48]	; 0x30
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006174:	2b01      	cmp	r3, #1
 8006176:	d12e      	bne.n	80061d6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60fb      	str	r3, [r7, #12]
   return(result);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	617b      	str	r3, [r7, #20]
   return(result);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d103      	bne.n	80061c6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2210      	movs	r2, #16
 80061c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff f9c4 	bl	800555c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061d4:	e00b      	b.n	80061ee <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fa fb9a 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 80061dc:	e007      	b.n	80061ee <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0208 	orr.w	r2, r2, #8
 80061ec:	619a      	str	r2, [r3, #24]
}
 80061ee:	bf00      	nop
 80061f0:	3758      	adds	r7, #88	; 0x58
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b096      	sub	sp, #88	; 0x58
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006204:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620e:	2b22      	cmp	r3, #34	; 0x22
 8006210:	f040 8098 	bne.w	8006344 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006224:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006228:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800622c:	4013      	ands	r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d17b      	bne.n	8006354 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	643b      	str	r3, [r7, #64]	; 0x40
 800627c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e6      	bne.n	800625c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	61fb      	str	r3, [r7, #28]
   return(result);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3308      	adds	r3, #8
 80062ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e5      	bne.n	800628e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d12e      	bne.n	800633c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f023 0310 	bic.w	r3, r3, #16
 80062f8:	647b      	str	r3, [r7, #68]	; 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b10      	cmp	r3, #16
 8006322:	d103      	bne.n	800632c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2210      	movs	r2, #16
 800632a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff f911 	bl	800555c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800633a:	e00b      	b.n	8006354 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fa fae7 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 8006342:	e007      	b.n	8006354 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	619a      	str	r2, [r3, #24]
}
 8006354:	bf00      	nop
 8006356:	3758      	adds	r7, #88	; 0x58
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_vsniprintf_r>:
 800635c:	b530      	push	{r4, r5, lr}
 800635e:	4614      	mov	r4, r2
 8006360:	2c00      	cmp	r4, #0
 8006362:	b09b      	sub	sp, #108	; 0x6c
 8006364:	4605      	mov	r5, r0
 8006366:	461a      	mov	r2, r3
 8006368:	da05      	bge.n	8006376 <_vsniprintf_r+0x1a>
 800636a:	238b      	movs	r3, #139	; 0x8b
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006372:	b01b      	add	sp, #108	; 0x6c
 8006374:	bd30      	pop	{r4, r5, pc}
 8006376:	f44f 7302 	mov.w	r3, #520	; 0x208
 800637a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800637e:	bf14      	ite	ne
 8006380:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006384:	4623      	moveq	r3, r4
 8006386:	9302      	str	r3, [sp, #8]
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800638e:	9100      	str	r1, [sp, #0]
 8006390:	9104      	str	r1, [sp, #16]
 8006392:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006396:	4669      	mov	r1, sp
 8006398:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800639a:	f000 f9ad 	bl	80066f8 <_svfiprintf_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	bfbc      	itt	lt
 80063a2:	238b      	movlt	r3, #139	; 0x8b
 80063a4:	602b      	strlt	r3, [r5, #0]
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d0e3      	beq.n	8006372 <_vsniprintf_r+0x16>
 80063aa:	9b00      	ldr	r3, [sp, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	e7df      	b.n	8006372 <_vsniprintf_r+0x16>
	...

080063b4 <vsniprintf>:
 80063b4:	b507      	push	{r0, r1, r2, lr}
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	460a      	mov	r2, r1
 80063bc:	4601      	mov	r1, r0
 80063be:	4803      	ldr	r0, [pc, #12]	; (80063cc <vsniprintf+0x18>)
 80063c0:	6800      	ldr	r0, [r0, #0]
 80063c2:	f7ff ffcb 	bl	800635c <_vsniprintf_r>
 80063c6:	b003      	add	sp, #12
 80063c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80063cc:	200000a8 	.word	0x200000a8

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <__errno>:
 80063e0:	4b01      	ldr	r3, [pc, #4]	; (80063e8 <__errno+0x8>)
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	200000a8 	.word	0x200000a8

080063ec <__libc_init_array>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4d0d      	ldr	r5, [pc, #52]	; (8006424 <__libc_init_array+0x38>)
 80063f0:	4c0d      	ldr	r4, [pc, #52]	; (8006428 <__libc_init_array+0x3c>)
 80063f2:	1b64      	subs	r4, r4, r5
 80063f4:	10a4      	asrs	r4, r4, #2
 80063f6:	2600      	movs	r6, #0
 80063f8:	42a6      	cmp	r6, r4
 80063fa:	d109      	bne.n	8006410 <__libc_init_array+0x24>
 80063fc:	4d0b      	ldr	r5, [pc, #44]	; (800642c <__libc_init_array+0x40>)
 80063fe:	4c0c      	ldr	r4, [pc, #48]	; (8006430 <__libc_init_array+0x44>)
 8006400:	f000 fc6a 	bl	8006cd8 <_init>
 8006404:	1b64      	subs	r4, r4, r5
 8006406:	10a4      	asrs	r4, r4, #2
 8006408:	2600      	movs	r6, #0
 800640a:	42a6      	cmp	r6, r4
 800640c:	d105      	bne.n	800641a <__libc_init_array+0x2e>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	f855 3b04 	ldr.w	r3, [r5], #4
 8006414:	4798      	blx	r3
 8006416:	3601      	adds	r6, #1
 8006418:	e7ee      	b.n	80063f8 <__libc_init_array+0xc>
 800641a:	f855 3b04 	ldr.w	r3, [r5], #4
 800641e:	4798      	blx	r3
 8006420:	3601      	adds	r6, #1
 8006422:	e7f2      	b.n	800640a <__libc_init_array+0x1e>
 8006424:	08006d8c 	.word	0x08006d8c
 8006428:	08006d8c 	.word	0x08006d8c
 800642c:	08006d8c 	.word	0x08006d8c
 8006430:	08006d90 	.word	0x08006d90

08006434 <__retarget_lock_acquire_recursive>:
 8006434:	4770      	bx	lr

08006436 <__retarget_lock_release_recursive>:
 8006436:	4770      	bx	lr

08006438 <memcpy>:
 8006438:	440a      	add	r2, r1
 800643a:	4291      	cmp	r1, r2
 800643c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006440:	d100      	bne.n	8006444 <memcpy+0xc>
 8006442:	4770      	bx	lr
 8006444:	b510      	push	{r4, lr}
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644e:	4291      	cmp	r1, r2
 8006450:	d1f9      	bne.n	8006446 <memcpy+0xe>
 8006452:	bd10      	pop	{r4, pc}

08006454 <_free_r>:
 8006454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006456:	2900      	cmp	r1, #0
 8006458:	d044      	beq.n	80064e4 <_free_r+0x90>
 800645a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645e:	9001      	str	r0, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f1a1 0404 	sub.w	r4, r1, #4
 8006466:	bfb8      	it	lt
 8006468:	18e4      	addlt	r4, r4, r3
 800646a:	f000 f8df 	bl	800662c <__malloc_lock>
 800646e:	4a1e      	ldr	r2, [pc, #120]	; (80064e8 <_free_r+0x94>)
 8006470:	9801      	ldr	r0, [sp, #4]
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	b933      	cbnz	r3, 8006484 <_free_r+0x30>
 8006476:	6063      	str	r3, [r4, #4]
 8006478:	6014      	str	r4, [r2, #0]
 800647a:	b003      	add	sp, #12
 800647c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006480:	f000 b8da 	b.w	8006638 <__malloc_unlock>
 8006484:	42a3      	cmp	r3, r4
 8006486:	d908      	bls.n	800649a <_free_r+0x46>
 8006488:	6825      	ldr	r5, [r4, #0]
 800648a:	1961      	adds	r1, r4, r5
 800648c:	428b      	cmp	r3, r1
 800648e:	bf01      	itttt	eq
 8006490:	6819      	ldreq	r1, [r3, #0]
 8006492:	685b      	ldreq	r3, [r3, #4]
 8006494:	1949      	addeq	r1, r1, r5
 8006496:	6021      	streq	r1, [r4, #0]
 8006498:	e7ed      	b.n	8006476 <_free_r+0x22>
 800649a:	461a      	mov	r2, r3
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b10b      	cbz	r3, 80064a4 <_free_r+0x50>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d9fa      	bls.n	800649a <_free_r+0x46>
 80064a4:	6811      	ldr	r1, [r2, #0]
 80064a6:	1855      	adds	r5, r2, r1
 80064a8:	42a5      	cmp	r5, r4
 80064aa:	d10b      	bne.n	80064c4 <_free_r+0x70>
 80064ac:	6824      	ldr	r4, [r4, #0]
 80064ae:	4421      	add	r1, r4
 80064b0:	1854      	adds	r4, r2, r1
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	d1e0      	bne.n	800647a <_free_r+0x26>
 80064b8:	681c      	ldr	r4, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	6053      	str	r3, [r2, #4]
 80064be:	440c      	add	r4, r1
 80064c0:	6014      	str	r4, [r2, #0]
 80064c2:	e7da      	b.n	800647a <_free_r+0x26>
 80064c4:	d902      	bls.n	80064cc <_free_r+0x78>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	e7d6      	b.n	800647a <_free_r+0x26>
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	1961      	adds	r1, r4, r5
 80064d0:	428b      	cmp	r3, r1
 80064d2:	bf04      	itt	eq
 80064d4:	6819      	ldreq	r1, [r3, #0]
 80064d6:	685b      	ldreq	r3, [r3, #4]
 80064d8:	6063      	str	r3, [r4, #4]
 80064da:	bf04      	itt	eq
 80064dc:	1949      	addeq	r1, r1, r5
 80064de:	6021      	streq	r1, [r4, #0]
 80064e0:	6054      	str	r4, [r2, #4]
 80064e2:	e7ca      	b.n	800647a <_free_r+0x26>
 80064e4:	b003      	add	sp, #12
 80064e6:	bd30      	pop	{r4, r5, pc}
 80064e8:	20000644 	.word	0x20000644

080064ec <sbrk_aligned>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4e0e      	ldr	r6, [pc, #56]	; (8006528 <sbrk_aligned+0x3c>)
 80064f0:	460c      	mov	r4, r1
 80064f2:	6831      	ldr	r1, [r6, #0]
 80064f4:	4605      	mov	r5, r0
 80064f6:	b911      	cbnz	r1, 80064fe <sbrk_aligned+0x12>
 80064f8:	f000 fba6 	bl	8006c48 <_sbrk_r>
 80064fc:	6030      	str	r0, [r6, #0]
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fba1 	bl	8006c48 <_sbrk_r>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	d00a      	beq.n	8006520 <sbrk_aligned+0x34>
 800650a:	1cc4      	adds	r4, r0, #3
 800650c:	f024 0403 	bic.w	r4, r4, #3
 8006510:	42a0      	cmp	r0, r4
 8006512:	d007      	beq.n	8006524 <sbrk_aligned+0x38>
 8006514:	1a21      	subs	r1, r4, r0
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fb96 	bl	8006c48 <_sbrk_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d101      	bne.n	8006524 <sbrk_aligned+0x38>
 8006520:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006524:	4620      	mov	r0, r4
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	20000648 	.word	0x20000648

0800652c <_malloc_r>:
 800652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006530:	1ccd      	adds	r5, r1, #3
 8006532:	f025 0503 	bic.w	r5, r5, #3
 8006536:	3508      	adds	r5, #8
 8006538:	2d0c      	cmp	r5, #12
 800653a:	bf38      	it	cc
 800653c:	250c      	movcc	r5, #12
 800653e:	2d00      	cmp	r5, #0
 8006540:	4607      	mov	r7, r0
 8006542:	db01      	blt.n	8006548 <_malloc_r+0x1c>
 8006544:	42a9      	cmp	r1, r5
 8006546:	d905      	bls.n	8006554 <_malloc_r+0x28>
 8006548:	230c      	movs	r3, #12
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	2600      	movs	r6, #0
 800654e:	4630      	mov	r0, r6
 8006550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006628 <_malloc_r+0xfc>
 8006558:	f000 f868 	bl	800662c <__malloc_lock>
 800655c:	f8d8 3000 	ldr.w	r3, [r8]
 8006560:	461c      	mov	r4, r3
 8006562:	bb5c      	cbnz	r4, 80065bc <_malloc_r+0x90>
 8006564:	4629      	mov	r1, r5
 8006566:	4638      	mov	r0, r7
 8006568:	f7ff ffc0 	bl	80064ec <sbrk_aligned>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	4604      	mov	r4, r0
 8006570:	d155      	bne.n	800661e <_malloc_r+0xf2>
 8006572:	f8d8 4000 	ldr.w	r4, [r8]
 8006576:	4626      	mov	r6, r4
 8006578:	2e00      	cmp	r6, #0
 800657a:	d145      	bne.n	8006608 <_malloc_r+0xdc>
 800657c:	2c00      	cmp	r4, #0
 800657e:	d048      	beq.n	8006612 <_malloc_r+0xe6>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	4631      	mov	r1, r6
 8006584:	4638      	mov	r0, r7
 8006586:	eb04 0903 	add.w	r9, r4, r3
 800658a:	f000 fb5d 	bl	8006c48 <_sbrk_r>
 800658e:	4581      	cmp	r9, r0
 8006590:	d13f      	bne.n	8006612 <_malloc_r+0xe6>
 8006592:	6821      	ldr	r1, [r4, #0]
 8006594:	1a6d      	subs	r5, r5, r1
 8006596:	4629      	mov	r1, r5
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff ffa7 	bl	80064ec <sbrk_aligned>
 800659e:	3001      	adds	r0, #1
 80065a0:	d037      	beq.n	8006612 <_malloc_r+0xe6>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	442b      	add	r3, r5
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d038      	beq.n	8006622 <_malloc_r+0xf6>
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	42a2      	cmp	r2, r4
 80065b4:	d12b      	bne.n	800660e <_malloc_r+0xe2>
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	e00f      	b.n	80065dc <_malloc_r+0xb0>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	1b52      	subs	r2, r2, r5
 80065c0:	d41f      	bmi.n	8006602 <_malloc_r+0xd6>
 80065c2:	2a0b      	cmp	r2, #11
 80065c4:	d917      	bls.n	80065f6 <_malloc_r+0xca>
 80065c6:	1961      	adds	r1, r4, r5
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	6025      	str	r5, [r4, #0]
 80065cc:	bf18      	it	ne
 80065ce:	6059      	strne	r1, [r3, #4]
 80065d0:	6863      	ldr	r3, [r4, #4]
 80065d2:	bf08      	it	eq
 80065d4:	f8c8 1000 	streq.w	r1, [r8]
 80065d8:	5162      	str	r2, [r4, r5]
 80065da:	604b      	str	r3, [r1, #4]
 80065dc:	4638      	mov	r0, r7
 80065de:	f104 060b 	add.w	r6, r4, #11
 80065e2:	f000 f829 	bl	8006638 <__malloc_unlock>
 80065e6:	f026 0607 	bic.w	r6, r6, #7
 80065ea:	1d23      	adds	r3, r4, #4
 80065ec:	1af2      	subs	r2, r6, r3
 80065ee:	d0ae      	beq.n	800654e <_malloc_r+0x22>
 80065f0:	1b9b      	subs	r3, r3, r6
 80065f2:	50a3      	str	r3, [r4, r2]
 80065f4:	e7ab      	b.n	800654e <_malloc_r+0x22>
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	d1dd      	bne.n	80065b8 <_malloc_r+0x8c>
 80065fc:	f8c8 2000 	str.w	r2, [r8]
 8006600:	e7ec      	b.n	80065dc <_malloc_r+0xb0>
 8006602:	4623      	mov	r3, r4
 8006604:	6864      	ldr	r4, [r4, #4]
 8006606:	e7ac      	b.n	8006562 <_malloc_r+0x36>
 8006608:	4634      	mov	r4, r6
 800660a:	6876      	ldr	r6, [r6, #4]
 800660c:	e7b4      	b.n	8006578 <_malloc_r+0x4c>
 800660e:	4613      	mov	r3, r2
 8006610:	e7cc      	b.n	80065ac <_malloc_r+0x80>
 8006612:	230c      	movs	r3, #12
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4638      	mov	r0, r7
 8006618:	f000 f80e 	bl	8006638 <__malloc_unlock>
 800661c:	e797      	b.n	800654e <_malloc_r+0x22>
 800661e:	6025      	str	r5, [r4, #0]
 8006620:	e7dc      	b.n	80065dc <_malloc_r+0xb0>
 8006622:	605b      	str	r3, [r3, #4]
 8006624:	deff      	udf	#255	; 0xff
 8006626:	bf00      	nop
 8006628:	20000644 	.word	0x20000644

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_lock+0x8>)
 800662e:	f7ff bf01 	b.w	8006434 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000640 	.word	0x20000640

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_unlock+0x8>)
 800663a:	f7ff befc 	b.w	8006436 <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000640 	.word	0x20000640

08006644 <__ssputs_r>:
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	688e      	ldr	r6, [r1, #8]
 800664a:	461f      	mov	r7, r3
 800664c:	42be      	cmp	r6, r7
 800664e:	680b      	ldr	r3, [r1, #0]
 8006650:	4682      	mov	sl, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4690      	mov	r8, r2
 8006656:	d82c      	bhi.n	80066b2 <__ssputs_r+0x6e>
 8006658:	898a      	ldrh	r2, [r1, #12]
 800665a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800665e:	d026      	beq.n	80066ae <__ssputs_r+0x6a>
 8006660:	6965      	ldr	r5, [r4, #20]
 8006662:	6909      	ldr	r1, [r1, #16]
 8006664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006668:	eba3 0901 	sub.w	r9, r3, r1
 800666c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006670:	1c7b      	adds	r3, r7, #1
 8006672:	444b      	add	r3, r9
 8006674:	106d      	asrs	r5, r5, #1
 8006676:	429d      	cmp	r5, r3
 8006678:	bf38      	it	cc
 800667a:	461d      	movcc	r5, r3
 800667c:	0553      	lsls	r3, r2, #21
 800667e:	d527      	bpl.n	80066d0 <__ssputs_r+0x8c>
 8006680:	4629      	mov	r1, r5
 8006682:	f7ff ff53 	bl	800652c <_malloc_r>
 8006686:	4606      	mov	r6, r0
 8006688:	b360      	cbz	r0, 80066e4 <__ssputs_r+0xa0>
 800668a:	6921      	ldr	r1, [r4, #16]
 800668c:	464a      	mov	r2, r9
 800668e:	f7ff fed3 	bl	8006438 <memcpy>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	6126      	str	r6, [r4, #16]
 80066a0:	6165      	str	r5, [r4, #20]
 80066a2:	444e      	add	r6, r9
 80066a4:	eba5 0509 	sub.w	r5, r5, r9
 80066a8:	6026      	str	r6, [r4, #0]
 80066aa:	60a5      	str	r5, [r4, #8]
 80066ac:	463e      	mov	r6, r7
 80066ae:	42be      	cmp	r6, r7
 80066b0:	d900      	bls.n	80066b4 <__ssputs_r+0x70>
 80066b2:	463e      	mov	r6, r7
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	4632      	mov	r2, r6
 80066b8:	4641      	mov	r1, r8
 80066ba:	f000 faab 	bl	8006c14 <memmove>
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	1b9b      	subs	r3, r3, r6
 80066c2:	60a3      	str	r3, [r4, #8]
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	4433      	add	r3, r6
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2000      	movs	r0, #0
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	462a      	mov	r2, r5
 80066d2:	f000 fac9 	bl	8006c68 <_realloc_r>
 80066d6:	4606      	mov	r6, r0
 80066d8:	2800      	cmp	r0, #0
 80066da:	d1e0      	bne.n	800669e <__ssputs_r+0x5a>
 80066dc:	6921      	ldr	r1, [r4, #16]
 80066de:	4650      	mov	r0, sl
 80066e0:	f7ff feb8 	bl	8006454 <_free_r>
 80066e4:	230c      	movs	r3, #12
 80066e6:	f8ca 3000 	str.w	r3, [sl]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f6:	e7e9      	b.n	80066cc <__ssputs_r+0x88>

080066f8 <_svfiprintf_r>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	4698      	mov	r8, r3
 80066fe:	898b      	ldrh	r3, [r1, #12]
 8006700:	061b      	lsls	r3, r3, #24
 8006702:	b09d      	sub	sp, #116	; 0x74
 8006704:	4607      	mov	r7, r0
 8006706:	460d      	mov	r5, r1
 8006708:	4614      	mov	r4, r2
 800670a:	d50e      	bpl.n	800672a <_svfiprintf_r+0x32>
 800670c:	690b      	ldr	r3, [r1, #16]
 800670e:	b963      	cbnz	r3, 800672a <_svfiprintf_r+0x32>
 8006710:	2140      	movs	r1, #64	; 0x40
 8006712:	f7ff ff0b 	bl	800652c <_malloc_r>
 8006716:	6028      	str	r0, [r5, #0]
 8006718:	6128      	str	r0, [r5, #16]
 800671a:	b920      	cbnz	r0, 8006726 <_svfiprintf_r+0x2e>
 800671c:	230c      	movs	r3, #12
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006724:	e0d0      	b.n	80068c8 <_svfiprintf_r+0x1d0>
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	616b      	str	r3, [r5, #20]
 800672a:	2300      	movs	r3, #0
 800672c:	9309      	str	r3, [sp, #36]	; 0x24
 800672e:	2320      	movs	r3, #32
 8006730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006734:	f8cd 800c 	str.w	r8, [sp, #12]
 8006738:	2330      	movs	r3, #48	; 0x30
 800673a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068e0 <_svfiprintf_r+0x1e8>
 800673e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006742:	f04f 0901 	mov.w	r9, #1
 8006746:	4623      	mov	r3, r4
 8006748:	469a      	mov	sl, r3
 800674a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800674e:	b10a      	cbz	r2, 8006754 <_svfiprintf_r+0x5c>
 8006750:	2a25      	cmp	r2, #37	; 0x25
 8006752:	d1f9      	bne.n	8006748 <_svfiprintf_r+0x50>
 8006754:	ebba 0b04 	subs.w	fp, sl, r4
 8006758:	d00b      	beq.n	8006772 <_svfiprintf_r+0x7a>
 800675a:	465b      	mov	r3, fp
 800675c:	4622      	mov	r2, r4
 800675e:	4629      	mov	r1, r5
 8006760:	4638      	mov	r0, r7
 8006762:	f7ff ff6f 	bl	8006644 <__ssputs_r>
 8006766:	3001      	adds	r0, #1
 8006768:	f000 80a9 	beq.w	80068be <_svfiprintf_r+0x1c6>
 800676c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800676e:	445a      	add	r2, fp
 8006770:	9209      	str	r2, [sp, #36]	; 0x24
 8006772:	f89a 3000 	ldrb.w	r3, [sl]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80a1 	beq.w	80068be <_svfiprintf_r+0x1c6>
 800677c:	2300      	movs	r3, #0
 800677e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006786:	f10a 0a01 	add.w	sl, sl, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	9307      	str	r3, [sp, #28]
 800678e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006792:	931a      	str	r3, [sp, #104]	; 0x68
 8006794:	4654      	mov	r4, sl
 8006796:	2205      	movs	r2, #5
 8006798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679c:	4850      	ldr	r0, [pc, #320]	; (80068e0 <_svfiprintf_r+0x1e8>)
 800679e:	f7f9 fd57 	bl	8000250 <memchr>
 80067a2:	9a04      	ldr	r2, [sp, #16]
 80067a4:	b9d8      	cbnz	r0, 80067de <_svfiprintf_r+0xe6>
 80067a6:	06d0      	lsls	r0, r2, #27
 80067a8:	bf44      	itt	mi
 80067aa:	2320      	movmi	r3, #32
 80067ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067b0:	0711      	lsls	r1, r2, #28
 80067b2:	bf44      	itt	mi
 80067b4:	232b      	movmi	r3, #43	; 0x2b
 80067b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ba:	f89a 3000 	ldrb.w	r3, [sl]
 80067be:	2b2a      	cmp	r3, #42	; 0x2a
 80067c0:	d015      	beq.n	80067ee <_svfiprintf_r+0xf6>
 80067c2:	9a07      	ldr	r2, [sp, #28]
 80067c4:	4654      	mov	r4, sl
 80067c6:	2000      	movs	r0, #0
 80067c8:	f04f 0c0a 	mov.w	ip, #10
 80067cc:	4621      	mov	r1, r4
 80067ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067d2:	3b30      	subs	r3, #48	; 0x30
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d94d      	bls.n	8006874 <_svfiprintf_r+0x17c>
 80067d8:	b1b0      	cbz	r0, 8006808 <_svfiprintf_r+0x110>
 80067da:	9207      	str	r2, [sp, #28]
 80067dc:	e014      	b.n	8006808 <_svfiprintf_r+0x110>
 80067de:	eba0 0308 	sub.w	r3, r0, r8
 80067e2:	fa09 f303 	lsl.w	r3, r9, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	46a2      	mov	sl, r4
 80067ec:	e7d2      	b.n	8006794 <_svfiprintf_r+0x9c>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	1d19      	adds	r1, r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	9103      	str	r1, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfbb      	ittet	lt
 80067fa:	425b      	neglt	r3, r3
 80067fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006800:	9307      	strge	r3, [sp, #28]
 8006802:	9307      	strlt	r3, [sp, #28]
 8006804:	bfb8      	it	lt
 8006806:	9204      	strlt	r2, [sp, #16]
 8006808:	7823      	ldrb	r3, [r4, #0]
 800680a:	2b2e      	cmp	r3, #46	; 0x2e
 800680c:	d10c      	bne.n	8006828 <_svfiprintf_r+0x130>
 800680e:	7863      	ldrb	r3, [r4, #1]
 8006810:	2b2a      	cmp	r3, #42	; 0x2a
 8006812:	d134      	bne.n	800687e <_svfiprintf_r+0x186>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	9203      	str	r2, [sp, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	bfb8      	it	lt
 8006820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006824:	3402      	adds	r4, #2
 8006826:	9305      	str	r3, [sp, #20]
 8006828:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80068f0 <_svfiprintf_r+0x1f8>
 800682c:	7821      	ldrb	r1, [r4, #0]
 800682e:	2203      	movs	r2, #3
 8006830:	4650      	mov	r0, sl
 8006832:	f7f9 fd0d 	bl	8000250 <memchr>
 8006836:	b138      	cbz	r0, 8006848 <_svfiprintf_r+0x150>
 8006838:	9b04      	ldr	r3, [sp, #16]
 800683a:	eba0 000a 	sub.w	r0, r0, sl
 800683e:	2240      	movs	r2, #64	; 0x40
 8006840:	4082      	lsls	r2, r0
 8006842:	4313      	orrs	r3, r2
 8006844:	3401      	adds	r4, #1
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684c:	4825      	ldr	r0, [pc, #148]	; (80068e4 <_svfiprintf_r+0x1ec>)
 800684e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006852:	2206      	movs	r2, #6
 8006854:	f7f9 fcfc 	bl	8000250 <memchr>
 8006858:	2800      	cmp	r0, #0
 800685a:	d038      	beq.n	80068ce <_svfiprintf_r+0x1d6>
 800685c:	4b22      	ldr	r3, [pc, #136]	; (80068e8 <_svfiprintf_r+0x1f0>)
 800685e:	bb1b      	cbnz	r3, 80068a8 <_svfiprintf_r+0x1b0>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	3307      	adds	r3, #7
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	3308      	adds	r3, #8
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686e:	4433      	add	r3, r6
 8006870:	9309      	str	r3, [sp, #36]	; 0x24
 8006872:	e768      	b.n	8006746 <_svfiprintf_r+0x4e>
 8006874:	fb0c 3202 	mla	r2, ip, r2, r3
 8006878:	460c      	mov	r4, r1
 800687a:	2001      	movs	r0, #1
 800687c:	e7a6      	b.n	80067cc <_svfiprintf_r+0xd4>
 800687e:	2300      	movs	r3, #0
 8006880:	3401      	adds	r4, #1
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	4619      	mov	r1, r3
 8006886:	f04f 0c0a 	mov.w	ip, #10
 800688a:	4620      	mov	r0, r4
 800688c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006890:	3a30      	subs	r2, #48	; 0x30
 8006892:	2a09      	cmp	r2, #9
 8006894:	d903      	bls.n	800689e <_svfiprintf_r+0x1a6>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0c6      	beq.n	8006828 <_svfiprintf_r+0x130>
 800689a:	9105      	str	r1, [sp, #20]
 800689c:	e7c4      	b.n	8006828 <_svfiprintf_r+0x130>
 800689e:	fb0c 2101 	mla	r1, ip, r1, r2
 80068a2:	4604      	mov	r4, r0
 80068a4:	2301      	movs	r3, #1
 80068a6:	e7f0      	b.n	800688a <_svfiprintf_r+0x192>
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <_svfiprintf_r+0x1f4>)
 80068b0:	a904      	add	r1, sp, #16
 80068b2:	4638      	mov	r0, r7
 80068b4:	f3af 8000 	nop.w
 80068b8:	1c42      	adds	r2, r0, #1
 80068ba:	4606      	mov	r6, r0
 80068bc:	d1d6      	bne.n	800686c <_svfiprintf_r+0x174>
 80068be:	89ab      	ldrh	r3, [r5, #12]
 80068c0:	065b      	lsls	r3, r3, #25
 80068c2:	f53f af2d 	bmi.w	8006720 <_svfiprintf_r+0x28>
 80068c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068c8:	b01d      	add	sp, #116	; 0x74
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	462a      	mov	r2, r5
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <_svfiprintf_r+0x1f4>)
 80068d6:	a904      	add	r1, sp, #16
 80068d8:	4638      	mov	r0, r7
 80068da:	f000 f879 	bl	80069d0 <_printf_i>
 80068de:	e7eb      	b.n	80068b8 <_svfiprintf_r+0x1c0>
 80068e0:	08006d50 	.word	0x08006d50
 80068e4:	08006d5a 	.word	0x08006d5a
 80068e8:	00000000 	.word	0x00000000
 80068ec:	08006645 	.word	0x08006645
 80068f0:	08006d56 	.word	0x08006d56

080068f4 <_printf_common>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	4616      	mov	r6, r2
 80068fa:	4699      	mov	r9, r3
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006904:	4293      	cmp	r3, r2
 8006906:	bfb8      	it	lt
 8006908:	4613      	movlt	r3, r2
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006910:	4607      	mov	r7, r0
 8006912:	460c      	mov	r4, r1
 8006914:	b10a      	cbz	r2, 800691a <_printf_common+0x26>
 8006916:	3301      	adds	r3, #1
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	0699      	lsls	r1, r3, #26
 800691e:	bf42      	ittt	mi
 8006920:	6833      	ldrmi	r3, [r6, #0]
 8006922:	3302      	addmi	r3, #2
 8006924:	6033      	strmi	r3, [r6, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	f015 0506 	ands.w	r5, r5, #6
 800692c:	d106      	bne.n	800693c <_printf_common+0x48>
 800692e:	f104 0a19 	add.w	sl, r4, #25
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	6832      	ldr	r2, [r6, #0]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dc26      	bgt.n	800698a <_printf_common+0x96>
 800693c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006940:	1e13      	subs	r3, r2, #0
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	bf18      	it	ne
 8006946:	2301      	movne	r3, #1
 8006948:	0692      	lsls	r2, r2, #26
 800694a:	d42b      	bmi.n	80069a4 <_printf_common+0xb0>
 800694c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006950:	4649      	mov	r1, r9
 8006952:	4638      	mov	r0, r7
 8006954:	47c0      	blx	r8
 8006956:	3001      	adds	r0, #1
 8006958:	d01e      	beq.n	8006998 <_printf_common+0xa4>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	2b04      	cmp	r3, #4
 8006964:	bf02      	ittt	eq
 8006966:	68e5      	ldreq	r5, [r4, #12]
 8006968:	6833      	ldreq	r3, [r6, #0]
 800696a:	1aed      	subeq	r5, r5, r3
 800696c:	68a3      	ldr	r3, [r4, #8]
 800696e:	bf0c      	ite	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	2500      	movne	r5, #0
 8006976:	4293      	cmp	r3, r2
 8006978:	bfc4      	itt	gt
 800697a:	1a9b      	subgt	r3, r3, r2
 800697c:	18ed      	addgt	r5, r5, r3
 800697e:	2600      	movs	r6, #0
 8006980:	341a      	adds	r4, #26
 8006982:	42b5      	cmp	r5, r6
 8006984:	d11a      	bne.n	80069bc <_printf_common+0xc8>
 8006986:	2000      	movs	r0, #0
 8006988:	e008      	b.n	800699c <_printf_common+0xa8>
 800698a:	2301      	movs	r3, #1
 800698c:	4652      	mov	r2, sl
 800698e:	4649      	mov	r1, r9
 8006990:	4638      	mov	r0, r7
 8006992:	47c0      	blx	r8
 8006994:	3001      	adds	r0, #1
 8006996:	d103      	bne.n	80069a0 <_printf_common+0xac>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	3501      	adds	r5, #1
 80069a2:	e7c6      	b.n	8006932 <_printf_common+0x3e>
 80069a4:	18e1      	adds	r1, r4, r3
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	2030      	movs	r0, #48	; 0x30
 80069aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ae:	4422      	add	r2, r4
 80069b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7c7      	b.n	800694c <_printf_common+0x58>
 80069bc:	2301      	movs	r3, #1
 80069be:	4622      	mov	r2, r4
 80069c0:	4649      	mov	r1, r9
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d0e6      	beq.n	8006998 <_printf_common+0xa4>
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7d9      	b.n	8006982 <_printf_common+0x8e>
	...

080069d0 <_printf_i>:
 80069d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	7e0f      	ldrb	r7, [r1, #24]
 80069d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d8:	2f78      	cmp	r7, #120	; 0x78
 80069da:	4691      	mov	r9, r2
 80069dc:	4680      	mov	r8, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	469a      	mov	sl, r3
 80069e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069e6:	d807      	bhi.n	80069f8 <_printf_i+0x28>
 80069e8:	2f62      	cmp	r7, #98	; 0x62
 80069ea:	d80a      	bhi.n	8006a02 <_printf_i+0x32>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	f000 80d4 	beq.w	8006b9a <_printf_i+0x1ca>
 80069f2:	2f58      	cmp	r7, #88	; 0x58
 80069f4:	f000 80c0 	beq.w	8006b78 <_printf_i+0x1a8>
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a00:	e03a      	b.n	8006a78 <_printf_i+0xa8>
 8006a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a06:	2b15      	cmp	r3, #21
 8006a08:	d8f6      	bhi.n	80069f8 <_printf_i+0x28>
 8006a0a:	a101      	add	r1, pc, #4	; (adr r1, 8006a10 <_printf_i+0x40>)
 8006a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	080069f9 	.word	0x080069f9
 8006a1c:	080069f9 	.word	0x080069f9
 8006a20:	080069f9 	.word	0x080069f9
 8006a24:	080069f9 	.word	0x080069f9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069f9 	.word	0x080069f9
 8006a30:	080069f9 	.word	0x080069f9
 8006a34:	080069f9 	.word	0x080069f9
 8006a38:	080069f9 	.word	0x080069f9
 8006a3c:	08006b81 	.word	0x08006b81
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006b3b 	.word	0x08006b3b
 8006a48:	080069f9 	.word	0x080069f9
 8006a4c:	080069f9 	.word	0x080069f9
 8006a50:	08006ba3 	.word	0x08006ba3
 8006a54:	080069f9 	.word	0x080069f9
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	080069f9 	.word	0x080069f9
 8006a60:	080069f9 	.word	0x080069f9
 8006a64:	08006b43 	.word	0x08006b43
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e09f      	b.n	8006bbc <_printf_i+0x1ec>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	0607      	lsls	r7, r0, #24
 8006a82:	f103 0104 	add.w	r1, r3, #4
 8006a86:	6029      	str	r1, [r5, #0]
 8006a88:	d501      	bpl.n	8006a8e <_printf_i+0xbe>
 8006a8a:	681e      	ldr	r6, [r3, #0]
 8006a8c:	e003      	b.n	8006a96 <_printf_i+0xc6>
 8006a8e:	0646      	lsls	r6, r0, #25
 8006a90:	d5fb      	bpl.n	8006a8a <_printf_i+0xba>
 8006a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	da03      	bge.n	8006aa2 <_printf_i+0xd2>
 8006a9a:	232d      	movs	r3, #45	; 0x2d
 8006a9c:	4276      	negs	r6, r6
 8006a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa2:	485a      	ldr	r0, [pc, #360]	; (8006c0c <_printf_i+0x23c>)
 8006aa4:	230a      	movs	r3, #10
 8006aa6:	e012      	b.n	8006ace <_printf_i+0xfe>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	1d19      	adds	r1, r3, #4
 8006aae:	6029      	str	r1, [r5, #0]
 8006ab0:	0605      	lsls	r5, r0, #24
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_i+0xe8>
 8006ab4:	681e      	ldr	r6, [r3, #0]
 8006ab6:	e002      	b.n	8006abe <_printf_i+0xee>
 8006ab8:	0641      	lsls	r1, r0, #25
 8006aba:	d5fb      	bpl.n	8006ab4 <_printf_i+0xe4>
 8006abc:	881e      	ldrh	r6, [r3, #0]
 8006abe:	4853      	ldr	r0, [pc, #332]	; (8006c0c <_printf_i+0x23c>)
 8006ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2308      	moveq	r3, #8
 8006ac6:	230a      	movne	r3, #10
 8006ac8:	2100      	movs	r1, #0
 8006aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ace:	6865      	ldr	r5, [r4, #4]
 8006ad0:	60a5      	str	r5, [r4, #8]
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	bfa2      	ittt	ge
 8006ad6:	6821      	ldrge	r1, [r4, #0]
 8006ad8:	f021 0104 	bicge.w	r1, r1, #4
 8006adc:	6021      	strge	r1, [r4, #0]
 8006ade:	b90e      	cbnz	r6, 8006ae4 <_printf_i+0x114>
 8006ae0:	2d00      	cmp	r5, #0
 8006ae2:	d04b      	beq.n	8006b7c <_printf_i+0x1ac>
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006aea:	fb03 6711 	mls	r7, r3, r1, r6
 8006aee:	5dc7      	ldrb	r7, [r0, r7]
 8006af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af4:	4637      	mov	r7, r6
 8006af6:	42bb      	cmp	r3, r7
 8006af8:	460e      	mov	r6, r1
 8006afa:	d9f4      	bls.n	8006ae6 <_printf_i+0x116>
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d10b      	bne.n	8006b18 <_printf_i+0x148>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	07de      	lsls	r6, r3, #31
 8006b04:	d508      	bpl.n	8006b18 <_printf_i+0x148>
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	6861      	ldr	r1, [r4, #4]
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	bfde      	ittt	le
 8006b0e:	2330      	movle	r3, #48	; 0x30
 8006b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b18:	1b52      	subs	r2, r2, r5
 8006b1a:	6122      	str	r2, [r4, #16]
 8006b1c:	f8cd a000 	str.w	sl, [sp]
 8006b20:	464b      	mov	r3, r9
 8006b22:	aa03      	add	r2, sp, #12
 8006b24:	4621      	mov	r1, r4
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7ff fee4 	bl	80068f4 <_printf_common>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d14a      	bne.n	8006bc6 <_printf_i+0x1f6>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b34:	b004      	add	sp, #16
 8006b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f043 0320 	orr.w	r3, r3, #32
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	4833      	ldr	r0, [pc, #204]	; (8006c10 <_printf_i+0x240>)
 8006b44:	2778      	movs	r7, #120	; 0x78
 8006b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	6829      	ldr	r1, [r5, #0]
 8006b4e:	061f      	lsls	r7, r3, #24
 8006b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b54:	d402      	bmi.n	8006b5c <_printf_i+0x18c>
 8006b56:	065f      	lsls	r7, r3, #25
 8006b58:	bf48      	it	mi
 8006b5a:	b2b6      	uxthmi	r6, r6
 8006b5c:	07df      	lsls	r7, r3, #31
 8006b5e:	bf48      	it	mi
 8006b60:	f043 0320 	orrmi.w	r3, r3, #32
 8006b64:	6029      	str	r1, [r5, #0]
 8006b66:	bf48      	it	mi
 8006b68:	6023      	strmi	r3, [r4, #0]
 8006b6a:	b91e      	cbnz	r6, 8006b74 <_printf_i+0x1a4>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	f023 0320 	bic.w	r3, r3, #32
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	2310      	movs	r3, #16
 8006b76:	e7a7      	b.n	8006ac8 <_printf_i+0xf8>
 8006b78:	4824      	ldr	r0, [pc, #144]	; (8006c0c <_printf_i+0x23c>)
 8006b7a:	e7e4      	b.n	8006b46 <_printf_i+0x176>
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	e7bd      	b.n	8006afc <_printf_i+0x12c>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	6826      	ldr	r6, [r4, #0]
 8006b84:	6961      	ldr	r1, [r4, #20]
 8006b86:	1d18      	adds	r0, r3, #4
 8006b88:	6028      	str	r0, [r5, #0]
 8006b8a:	0635      	lsls	r5, r6, #24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0x1c4>
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0x1ca>
 8006b94:	0670      	lsls	r0, r6, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0x1c0>
 8006b98:	8019      	strh	r1, [r3, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	e7bc      	b.n	8006b1c <_printf_i+0x14c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fb4e 	bl	8000250 <memchr>
 8006bb4:	b108      	cbz	r0, 8006bba <_printf_i+0x1ea>
 8006bb6:	1b40      	subs	r0, r0, r5
 8006bb8:	6060      	str	r0, [r4, #4]
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	e7aa      	b.n	8006b1c <_printf_i+0x14c>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d0ad      	beq.n	8006b30 <_printf_i+0x160>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	d413      	bmi.n	8006c02 <_printf_i+0x232>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	4298      	cmp	r0, r3
 8006be0:	bfb8      	it	lt
 8006be2:	4618      	movlt	r0, r3
 8006be4:	e7a6      	b.n	8006b34 <_printf_i+0x164>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d09d      	beq.n	8006b30 <_printf_i+0x160>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	9903      	ldr	r1, [sp, #12]
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dcf2      	bgt.n	8006be6 <_printf_i+0x216>
 8006c00:	e7eb      	b.n	8006bda <_printf_i+0x20a>
 8006c02:	2500      	movs	r5, #0
 8006c04:	f104 0619 	add.w	r6, r4, #25
 8006c08:	e7f5      	b.n	8006bf6 <_printf_i+0x226>
 8006c0a:	bf00      	nop
 8006c0c:	08006d61 	.word	0x08006d61
 8006c10:	08006d72 	.word	0x08006d72

08006c14 <memmove>:
 8006c14:	4288      	cmp	r0, r1
 8006c16:	b510      	push	{r4, lr}
 8006c18:	eb01 0402 	add.w	r4, r1, r2
 8006c1c:	d902      	bls.n	8006c24 <memmove+0x10>
 8006c1e:	4284      	cmp	r4, r0
 8006c20:	4623      	mov	r3, r4
 8006c22:	d807      	bhi.n	8006c34 <memmove+0x20>
 8006c24:	1e43      	subs	r3, r0, #1
 8006c26:	42a1      	cmp	r1, r4
 8006c28:	d008      	beq.n	8006c3c <memmove+0x28>
 8006c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c32:	e7f8      	b.n	8006c26 <memmove+0x12>
 8006c34:	4402      	add	r2, r0
 8006c36:	4601      	mov	r1, r0
 8006c38:	428a      	cmp	r2, r1
 8006c3a:	d100      	bne.n	8006c3e <memmove+0x2a>
 8006c3c:	bd10      	pop	{r4, pc}
 8006c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c46:	e7f7      	b.n	8006c38 <memmove+0x24>

08006c48 <_sbrk_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_sbrk_r+0x1c>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fa fce4 	bl	8001620 <_sbrk>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_sbrk_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_sbrk_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	2000063c 	.word	0x2000063c

08006c68 <_realloc_r>:
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	4614      	mov	r4, r2
 8006c70:	460e      	mov	r6, r1
 8006c72:	b921      	cbnz	r1, 8006c7e <_realloc_r+0x16>
 8006c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c78:	4611      	mov	r1, r2
 8006c7a:	f7ff bc57 	b.w	800652c <_malloc_r>
 8006c7e:	b92a      	cbnz	r2, 8006c8c <_realloc_r+0x24>
 8006c80:	f7ff fbe8 	bl	8006454 <_free_r>
 8006c84:	4625      	mov	r5, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	f000 f81b 	bl	8006cc6 <_malloc_usable_size_r>
 8006c90:	4284      	cmp	r4, r0
 8006c92:	4607      	mov	r7, r0
 8006c94:	d802      	bhi.n	8006c9c <_realloc_r+0x34>
 8006c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c9a:	d812      	bhi.n	8006cc2 <_realloc_r+0x5a>
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	f7ff fc44 	bl	800652c <_malloc_r>
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d0ed      	beq.n	8006c86 <_realloc_r+0x1e>
 8006caa:	42bc      	cmp	r4, r7
 8006cac:	4622      	mov	r2, r4
 8006cae:	4631      	mov	r1, r6
 8006cb0:	bf28      	it	cs
 8006cb2:	463a      	movcs	r2, r7
 8006cb4:	f7ff fbc0 	bl	8006438 <memcpy>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4640      	mov	r0, r8
 8006cbc:	f7ff fbca 	bl	8006454 <_free_r>
 8006cc0:	e7e1      	b.n	8006c86 <_realloc_r+0x1e>
 8006cc2:	4635      	mov	r5, r6
 8006cc4:	e7df      	b.n	8006c86 <_realloc_r+0x1e>

08006cc6 <_malloc_usable_size_r>:
 8006cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cca:	1f18      	subs	r0, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bfbc      	itt	lt
 8006cd0:	580b      	ldrlt	r3, [r1, r0]
 8006cd2:	18c0      	addlt	r0, r0, r3
 8006cd4:	4770      	bx	lr
	...

08006cd8 <_init>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_fini>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr
